#include "iostream"
#include "QString"
#include "widget.h"
#include "ui_widget.h"
#include <QMessageBox>
#include <QMessageBox>
#include <qmessagebox.h>
#include <qmessagebox.h>
#include <QDebug>
#include <qdebug.h>
#include <String>
#include <QFileDialog>
#include <QFile>
#include <sint.h>

Widget::Widget(QWidget *parent)
    : QWidget(parent)
    , ui(new Ui::Widget)
{
    ui->setupUi(this);
    QStringList titulos; titulos << "Token" << "        Lexema       " << "                    Gramema                    ";
    ui->table->setColumnCount(3);
    ui->table->setHorizontalHeaderLabels(titulos);
    ui->table->resizeColumnsToContents();

    QStringList titulosTablaTipos; titulosTablaTipos << "Variable" << "Tipos" << "                      Errores                      ";
    ui->tablaTipos->setColumnCount(3);
    ui->tablaTipos->setHorizontalHeaderLabels(titulosTablaTipos);
    ui->tablaTipos->resizeColumnsToContents();
    ui->tablaTipos->rowHeight(10);
    //ui->tablaTipos->resizeRowsToContents();

    QStringList titulosTablaCuad; titulosTablaCuad << " OPER " << "      OP1      " << "      OP2      " << "      RES      ";
    ui->tablaCuadruplos->setColumnCount(4);
    ui->tablaCuadruplos->setHorizontalHeaderLabels(titulosTablaCuad);
    ui->tablaCuadruplos->resizeColumnsToContents();
    ui->tablaCuadruplos->rowHeight(5);

    QStringList titulosTablaSaltos; titulosTablaSaltos << "                                     SALTOS                                ";
    ui->tablaSaltos->setColumnCount(1);
    ui->tablaSaltos->setHorizontalHeaderLabels(titulosTablaSaltos);
    ui->tablaSaltos->resizeColumnsToContents();
    ui->tablaSaltos->rowHeight(5);

    QStringList titulosTablaOperandos; titulosTablaOperandos << "                    OPERANDOS                        ";
    ui->tablaOperandos->setColumnCount(1);
    ui->tablaOperandos->setHorizontalHeaderLabels(titulosTablaOperandos);
    ui->tablaOperandos->resizeColumnsToContents();
    ui->tablaOperandos->rowHeight(5);

    QStringList titulosTablaOperadores; titulosTablaOperadores << "                   OPERADORES                         ";
    ui->tablaOperadores->setColumnCount(1);
    ui->tablaOperadores->setHorizontalHeaderLabels(titulosTablaOperadores);
    ui->tablaOperadores->resizeColumnsToContents();
    ui->tablaOperadores->rowHeight(5);
}

Widget::~Widget()
{
    delete ui;
}

QList<QString> pRes = {"class","endclass","int","float","char","string","bool","if","else","elseif","endif","do","eval","enddo","while","endwhile","read","write","def","as","for",
                       "endfor","private","public","protected","library","func","endfunc","main","endmain","true","false","to","void","local","endlocal"};

//std::string aux = "";
QString errores = ""; QString cadenita = "";
QString sintac = "";
QList<int> tokens; int tokenconc = 0;
QList<QString> lexemas; int lexemaconc = 0;


// SEM√ÅNTICO
bool buliano = false;
QList<QString> operadores;
QList<QString> operandos;
QList<QString> oprsSeparador;
QList<QString> tipo;
QList<int> saltos;
QList<QString> semOpnd = {"quitar"};
QList<QString> semOpndSeparador;
int contador = 0;
int temporalTipos = 1;
int temporalCuadruplos = 1;
int ultimoSalto = 0;

int Matriz(int fila, int col){
    //      L	,	l	,	d	,	_	,	.	,	'	,	"	,  todo	,	E	,	e	,	+	,	-	,	*	,	/	,	%	,	=	,	<	,	>	,	!	,	&	,	|	,	[	,	]	,	(	,	)	,	,	,	;	,	{   ,   }   ,  esp  ,   dif	,	\b	,	\n	,	\t	,	\0
    int transiciones [27][34] = {
        {	2	,	1	,	3	,	506	,	25	,	15	,	17	,	506	,	2	,	1	,	18	,	19	,	20	,	21	,	22	,	26	,	9	,	10	,	11	,	12	,	13	,	14	,	121	,	123	,	119	,	120	,	124	,	123	,	140	,	506	,	506	,	506	,	506	,	141	}	, //q0
        {	2	,	1	,	2	,	2	,	100	,	100	,	100	,	100	,	2	,	1	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	100	,	141	}	, //q1
        {	2	,	2	,	2	,	2	,	101	,	101	,	101	,	101	,	2	,	2	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	101	,	141	}	, //q2
        {	506	,	506	,	3	,	102	,	4	,	102	,	102	,	102	,	102	,	102	,	18	,	19	,	20	,	21	,	102	,	21	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	102	,	141	}	, //q3
        {	500	,	500	,	5	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	500	,	141	}	, //q4
        {	6	,	6	,	5	,	103	,	103	,	103	,	103	,	103	,	6	,	6	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	103	,	141	}	, //q5
        {	501	,	501	,	8	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	7	,	7	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	501	,	141	}	, //q6
        {	502	,	502	,	8	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	502	,	141	}	, //q7
        {	104	,	104	,	8	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	104	,	141	}	, //q8
        {	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	110	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	109	,	141	}	, //q9
        {	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	112	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	111	,	141	}	, //q10
        {	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	114	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	113	,	141	}	, //q11
        {	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	116	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	115	,	141	}	, //q12
        {	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	117	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	506	,	141	}	, //q13
        {	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	118	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	504	,	141	}	, //q14
        {	16	,	16	,	16	,	16	,	16	,	125	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	16	,	505	,	505	,	16	,	141	}	, //q15
        {	507	,	507	,	507	,	507	,	507	,	125	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	507	,	141	}	, //q16
        {	17	,	17	,	17	,	17	,	17	,	17	,	126	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	17	,	507	,	507	,	507	,	141	}	, //q17
        {	508	,	508	,	105	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	128	,	508	,	508	,	508	,	508	,	508	,	129	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	105	,	508	,	508	,	508	,	141	}	, //q19
        {	508	,	508	,	106	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	130	,	508	,	508	,	508	,	508	,	131	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	106	,	508	,	508	,	508	,	141	}	, //q20
        {	508	,	508	,	107	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	132	,	508	,	508	,	508	,	133	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	107	,	508	,	508	,	508	,	141	}	, //q21
        {	508	,	508	,	108	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	23	,	508	,	508	,	508	,	134	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	108	,	508	,	508	,	508	,	141	}	, //q23
        {	508	,	508	,	136	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	135	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	136	,	508	,	508	,	508	,	141	}	, //q23
        {	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	24	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	141	}	, //q24
        {	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	24	,	139	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	23	,	141	}	, //q21
        {	508	,	508	,	508	,	508	,	137	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	508	,	141	}	, //q21
        {	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	26	,	127	,	26	,	127	,	26	,	141	}	, //q21
    };
    int ret = transiciones[fila][col];

    //qInfo() << "    MATRIZ --- Fila:" << fila << "    Col:" << col << "  Nuevo valor de estado:" << ret;

    return ret;
}

int MPredictiva(int fila, int col){
    //    1000	  1001    1002    1003    1004    1005	   1006   1007    1008    1009    1010    1011    1012    1013    1014    1015    1016    1017    1018    1019    1020    1021    1022    1023    1024    1025    1026    1027    1028    1029    1030    1031    1032    1033    1034    1035    1036    1037    1038    1039    1040    1041    1042    1043    1044    1045    1046    1047    1048    1049    1050    1051    1052    1053    1054    1055    1056    1057    1058    1059    1060    1061    1062    1063    1064    1065    1066    1067    1068    1069    1070    1071
    //  library Nom_lib	     ;	  class	   id	endclass	def		as	 public private protected	,	  cteent	..	   int	  float	   char  string   bool    void     main		(		)    endmain  local	endlocal   func	endfunc   read    write   return     =  	+=      -=		*=		/=		%=		 [		 ]		++		--	   for		to		do	  endfor  while	endwhile   eval	  enddo		if	  endif   elseif   else		||		&&		!		+		-		*		/		%		==		!=		<		<=		>		>=   ctereal  ctenot  ctecar ctestring  $
    int predictiva[52][72] = {
        {	1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	1	},	//	PROGRAM	q0
        {	2	,	-1	,	-1	,	3	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	DECLARA_LIBRARY	q1
        {	-1	,	-1	,	-1	,	4	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	DECLARA_CLASS	q2
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	5	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	23	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	DECLARA	q3
        {	-1	,	-1	,	-1	,	-1	,	10	,	-1	,	-1	,	-1	,	7	,	8	,	9	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	ACCESO_VAR	q4
        {	-1	,	-1	,	-1	,	-1	,	11	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	17	,	18	,	19	,	20	,	21	,	22	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	ID_DIM	q5
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	12	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	13	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	ID_DIM'	q6
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	14	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	DIM	q7
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	15	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	16	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	16	},	//	DIM'	q8
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	17	,	18	,	19	,	20	,	21	,	22	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	TIPO	q9
        {	-1	,	-1	,	-1	,	-1	,	-1	,	23	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	23	,	-1	,	-1	,	-1	,	-1	,	-1	,	23	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	METODOS	q10
        {	-1	,	-1	,	-1	,	-1	,	-1	,	32	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	31	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	32	},	//	DECLARA_FUNCTION	q11
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	24	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	DECLARA_MAIN	q12
        {	-1	,	-1	,	-1	,	-1	,	25	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	26	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	26	},	//	PARAMETROS	q13
        {	-1	,	-1	,	-1	,	-1	,	28	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	28	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	28	,	-1	,	28	,	27	,	-1	,	-1	,	28	,	28	,	28	,	28	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	28	,	28	,	28	,	-1	,	28	,	28	,	28	,	28	,	28	,	-1	,	28	,	28	,	28	,	28	,	-1	,	-1	,	28	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	28	,	28	,	28	,	28	,	28	},	//	DEC_LOCALVAR	q14
        {	-1	,	-1	,	-1	,	-1	,	29	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	30	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	30	},	//	DEC_LOCALVAR'	q15
        {	-1	,	-1	,	-1	,	-1	,	33	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	38	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	38	,	-1	,	42	,	-1	,	-1	,	-1	,	42	,	40	,	41	,	39	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	38	,	38	,	36	,	-1	,	37	,	42	,	35	,	42	,	42	,	-1	,	34	,	42	,	42	,	42	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	38	,	38	,	38	,	38	,	42	},	//	ESTATUTOS	q16
        {	-1	,	-1	,	-1	,	-1	,	43	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	ID	q17
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	44	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	45	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	45	},	//	ID'	q18
        {	-1	,	-1	,	-1	,	-1	,	46	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	EST_ASIG	q19
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	47	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	EST_READ	q20
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	48	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	EST_WRITE	q21
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	49	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	50	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	50	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	50	},	//	EXPCOMA	q22
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	51	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	EST_RETURN	q23
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	52	,	53	,	54	,	55	,	56	,	57	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	OPASIG	q24
        {	-1	,	-1	,	-1	,	-1	,	58	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	ASIG	q25
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	60	,	60	,	60	,	60	,	60	,	60	,	59	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	60	},	//	ASIG'	q26
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	61	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	DIM_ASIG	q27
        {	-1	,	-1	,	-1	,	-1	,	64	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	64	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	64	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	62	,	63	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	64	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	64	,	64	,	64	,	64	,	-1	},	//	EST_UNIT	q28
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	65	,	66	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	EST_UNIT'	q29
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	67	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	EST_FOR	q30
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	68	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	EST_WHILE	q31
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	69	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	EST_DO	q32
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	70	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	EST_IF	q33
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	72	,	71	,	72	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	72	},	//	EST_IF'	q34
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	74	,	-1	,	73	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	ES_IF''	q35
        {	-1	,	-1	,	-1	,	-1	,	75	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	75	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	75	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	75	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	75	,	75	,	75	,	75	,	-1	},	//	EXPR	q36
        {	-1	,	-1	,	77	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	77	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	77	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	77	,	77	,	77	,	-1	,	77	,	77	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	76	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	77	},	//	EXPR'	q37
        {	-1	,	-1	,	-1	,	-1	,	78	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	78	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	78	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	78	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	78	,	78	,	78	,	78	,	-1	},	//	EXPR2	q38
        {	-1	,	-1	,	80	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	80	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	80	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	80	,	80	,	80	,	-1	,	80	,	80	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	80	,	79	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	80	},	//	EXPR2'	q39
        {	-1	,	-1	,	-1	,	-1	,	81	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	81	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	81	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	22	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	81	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	81	,	81	,	81	,	81	,	-1	},	//	EXPR3	q40
        {	-1	,	-1	,	-1	,	-1	,	83	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	83	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	83	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	83	,	83	,	83	,	83	,	-1	},	//	EXPR4	q41
        {	-1	,	-1	,	85	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	85	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	85	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	85	,	85	,	85	,	-1	,	85	,	85	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	85	,	85	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	84	,	84	,	84	,	84	,	84	,	84	,	-1	,	-1	,	-1	,	-1	,	85	},	//	EXPR4'	q42
        {	-1	,	-1	,	-1	,	-1	,	86	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	86	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	86	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	86	,	86	,	86	,	86	,	-1	},	//	EXPR5	q43
        {	-1	,	-1	,	89	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	89	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	89	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	89	,	89	,	89	,	-1	,	89	,	89	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	89	,	89	,	-1	,	87	,	88	,	-1	,	-1	,	-1	,	89	,	89	,	89	,	89	,	89	,	89	,	-1	,	-1	,	-1	,	-1	,	89	},	//	EXPR5'	q44
        {	-1	,	-1	,	-1	,	-1	,	90	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	90	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	90	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	90	,	90	,	90	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	90	,	90	,	90	,	90	,	-1	},	//	TERM	q45
        {	-1	,	-1	,	94	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	94	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	94	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	94	,	94	,	94	,	-1	,	94	,	94	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	94	,	94	,	-1	,	94	,	94	,	91	,	92	,	93	,	94	,	94	,	94	,	94	,	94	,	94	,	-1	,	-1	,	-1	,	-1	,	94	},	//	TERM'	q46
        {	-1	,	-1	,	-1	,	-1	,	101	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	102	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	107	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	103	,	104	,	105	,	106	,	-1	},	//	FACT	q47
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	95	,	96	,	97	,	98	,	99	,	100	,	-1	,	-1	,	-1	,	-1	,	-1	},	//	OPREL	q48
        {	-1	,	-1	,	109	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	109	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	108	,	109	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	109	,	109	,	109	,	-1	,	109	,	109	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	109	,	109	,	-1	,	109	,	109	,	-1	,	-1	,	-1	,	109	,	109	,	109	,	109	,	109	,	109	,	-1	,	-1	,	-1	,	-1	,	109	},	//	LLAMADA_F	q49
        {	-1	,	-1	,	-1	,	-1	,	110	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	111	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	111	},	//	LLAMADA'	q50
        {	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	112	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	113	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	-1	,	113	},	//	LLAMADA''	q51
    };
    int ret = predictiva[fila][col];

    return ret;
}

QString Token (int e){
    QString token = "";
    //qInfo() << "                Lexema del token" << e << ": " << cadenita;
    switch (e){
    case 100 :
        token = "Aceptaci√≥n 100: Palabra reservada.";
        for (int j = 0; j < pRes.size(); j++) {
            //{"if","else","for","class","int","float","char","long","double","String","boolean","while","public","private","extends","package","import","break","case","null","switch","return"};
            if (cadenita == pRes.at(j)){
                //qInfo() << "                Palabra reservada global: " << pReserv[j];
                token = "Aceptaci√≥n 100: Palabra reservada.";
                j = 35;
                break;
            } else {
                token = "Aceptaci√≥n 101: Identificador.";
            }
        }
        break;
    case 101:
        token = "Aceptaci√≥n 101: Identificador.";
        for (int j = 0; j < pRes.size(); j++) {
            //{"if","else","for","class","int","float","char","long","double","String","boolean","while","public","private","extends","package","import","break","case","null","switch","return"};
            if (cadenita == pRes.at(j)){
                j = 35;
                token = "Aceptaci√≥n 100: Palabra reservada.";
                break;
            } else {
                token = "Aceptaci√≥n 101: Identificador.";
            }
        }
        break;
    case 102:
        token = "Aceptaci√≥n 102: Constantes enteras.";
        break;
    case 103:
        token = "Aceptaci√≥n 103: Constantes reales.";
        break;
    case 104:
        token = "Aceptaci√≥n 104: Constantes de notaci√≥n cient√≠fica.";
        break;
    case 105:
        token = "Aceptaci√≥n 105: Suma (+).";
        break;
    case 106:
        token = "Aceptaci√≥n 106: Resta (-).";
        break;
    case 107:
        token = "Aceptaci√≥n 107: Multiplicaci√≥n (*).";
        break;
    case 108:
        token = "Aceptaci√≥n 108: Divisi√≥n (/).";
        break;
    case 109:
        token = "Aceptaci√≥n 109: Asignaci√≥n (=).";
        break;
    case 110:
        token = "Aceptaci√≥n 110: Igualdad (==).";
        break;
    case 111:
        token = "Aceptaci√≥n 111: Menor (<).";
        break;
    case 112:
        token = "Aceptaci√≥n 112: Menor igual que (<=).";
        break;
    case 113:
        token = "Aceptaci√≥n 113: Mayor (>).";
        break;
    case 114:
        token = "Aceptaci√≥n 114: Mayor igual que (>=).";
        break;
    case 115:
        token = "Aceptaci√≥n 115: Diferente (!).";
        break;
    case 116:
        token = "Aceptaci√≥n 116: Not (!=).";
        break;
    case 117:
        token = "Aceptaci√≥n 117: And (&).";
        break;
    case 118:
        token = "Aceptaci√≥n 118: Or (||).";
        break;
    case 119:
        token = "Aceptaci√≥n 119: Par√©ntesis que abre.";
        break;
    case 120:
        token = "Aceptaci√≥n 120: Par√©ntesis que cierra.";
        break;
    case 121:
        token = "Aceptaci√≥n 121: Corchete que abre.";
        break;
    case 122:
        token = "Aceptaci√≥n 122: Corchete que cierra.";
        break;
    case 123:
        token = "Aceptaci√≥n 123: Punto y coma.";
        break;
    case 124:
        token = "Aceptaci√≥n 124: Coma.";
        break;
    case 125:
        token = "Aceptaci√≥n 125: Caract√©r.";
        break;
    case 126:
        token = "Aceptaci√≥n 126: Cadena.";
        break;
    case 127:
        token = "Aceptaci√≥n 127: Comentario de l√≠nea (#).";
        break;
    case 128:
        token = "Aceptaci√≥n 128: Incremento (++).";
        break;
    case 129:
        token = "Aceptaci√≥n 129: Concatenaci√≥n/Asignaci√≥n con suma (+=).";
        break;
    case 130:
        token = "Aceptaci√≥n 130: Decremento (--).";
        break;
    case 131:
        token = "Aceptaci√≥n 131: Asignaci√≥n con resta (-=).";
        break;
    case 132:
        token = "Aceptaci√≥n 132: Potencia (**).";
        break;
    case 133:
        token = "Aceptaci√≥n 133: Asignaci√≥n con multiplicaci√≥n (*=)";
        break;
    case 134:
        token = "Aceptaci√≥n 134: Asignaci√≥n con divisi√≥n (/=)";
        break;
    case 135:
        token = "Aceptaci√≥n 135: Asignaci√≥n con m√≥dulo (%=)";
        break;
    case 136:
        token = "Aceptaci√≥n 136: M√≥dulo(%)";
        break;
    case 137:
        token = "Aceptaci√≥n 137: Punto punto (..).";
        break;
    case 138:
        token = "Aceptaci√≥n 138: Inicio de comentario de bloque (/*).";
        break;
    case 139:
        token = "Aceptaci√≥n 139: Fin de comentario de bloque (*/).";
        break;
    case 140:
        token = "Aceptaci√≥n 140: Espacio.";
        break;
    case 141:
        token = "Aceptaci√≥n 141: Fin del an√°lisis.";
        break;
    }

    return token;
} //fin de token

QString Error(int e){ //Esta es la Tabla de Errores
    QString error = "";

    switch (e) {
    case 500 :
        error = "Error 500: Un n√∫mero real no puede terminar en un punto. (dd.)";
        break;
    case 501 :
        error = "Error 501: Un n√∫mero de notaci√≥n cient√≠fica no puede terminar con la E/e. (d.dE / d.de)";
        break;
    case 502 :
        error = "Error 502: Un n√∫mero de notaci√≥n cient√≠fica no puede terminar en un +/-. (d.dE+ / d.dE-)";
        break;
    case 503 :
        error = "Error 503: Un amperson (&) tiene que ir seguido de otro amperson, no puede haber 1 s√≥lo amperson.";
        break;
    case 504 :
        error = "Error 504: Una pleca (|) tiene que ir segudia de otra pleca, no puede haber 1 s√≥la pleca.";
        break;
    case 505 :
        error = "Error 505: Al escribir una comilla simple o doble no se puede terminar la oraci√≥n. Tiene que venir seguido de cualquier cosa.";
        break;
    case 506 :
        //error = "Error 506: Se encontraron delimitadores";
        error = "";
        break;
    case 507 :
        error = "Error 507: Despu√©s de escribir la comilla y cualquier cosa, no se puede terminar la oraci√≥n. Tiene que venir seguido de otra comilla.";
        break;
    case 508 :
        error = "Error 508: Operaci√≥n inv√°lida";
        break;
    }

    return error;
} // fin de error

int relaciona(char c, int antiguo){ //Relaciona busca seg√∫n las columnas de la tabla de funciones
    //	L	l	d	_	.	'	"	todo	E	e	+	-	*	/	%	=	<	>	!	&	|	[	]	(	)	,	;	dif  \b  \n  \t  \0
    int valor = c;

    //qInfo() << ";  Valor en ASCII: " << valor;

    if (valor >= 65 && valor <= 90){ //letras may√∫sculas
        //qInfo() << "; letra may√∫scula";
        return 0;
    } else if (valor >= 97 && valor <= 122){ //letras min√∫sculas
        //qInfo() << "; letra min√∫scula";
        return 1;
    } else if (valor >= 48 && valor <= 57){ //d√≠gitos
        //qInfo() << "; d√≠gito";
        return 2 ;
    } else if (valor == 39){ //comilla simple
        return 5;
    } else if (valor == 34){ //comilla doble
        return 6;
    } else if (valor == 10){ //enter/retorno de carro
        return 31;
    } else if (valor == 9){ //tabulador
        return 32;
    } else if (valor == 32){ //espacios
        return 29;
    } else if (valor == 92){
        return 29;
    }

    switch ( c ){
    case '_': return 3;
    case '.': return 4;
    case 'E': return 8;
    case 'e': return 9;
    case '+': return 10;
    case '-': return 11;
    case '*': return 12;
    case '/': return 13;
    case '%': return 14;
    case '#': return 15;
    case '=': return 16;
    case '<': return 17;
    case '>': return 18;
    case '!': return 19;
    case '&': return 20;
    case '|': return 21;
    case '[': return 22;
    case ']': return 23;
    case '(': return 24;
    case ')': return 25;
    case ',': return 26;
    case ';': return 27;
    }

    return 29; //diferente
}

void Widget::on_btnAnalizar_clicked()
{
    QList<int> tokenz; int tokenkonk = 0;
    QList<QString> lexemaz; int lexkonk = 0;
    limpiar();
    QMessageBox msgBx; //msgBx.setText(rec); msgBx.exec();
    char barraIn = 92;
    QString cad = ui->txtCadena->toPlainText(); cad.insert(cad.length(),barraIn);
    QString cd = "", token = "";

    for (int i = 0; i <= cad.length()-1; i++){
        cd += cad.at(i);
        if (cad.at(i) == '0' && cad.at(i-1) == barraIn){
            i = cad.length();
        }
    }
    cad = "";

    // qInfo() << "Cadena (cd):" << cd << "; Longitud:" << cd.length() << "\n";

    std::string aux = cd.toStdString();
    char car [aux.length()];
    int estado = 0, columna = 0, ant = 0;

    for (int i = 0; i <= aux.length()-1; i++){
        car[i] = aux.at(i); int asc = car[i];
        //qInfo() << "C√°racter en: " << i << ": " << car[i] << "; Valor en ASCII: " << asc;
    }

    // AQUI EMPEIZA A ANALIZAR EL VECTOR DE CHAR
    for (int i = 0; i <= aux.length()-1; i++) {
        // qInfo() << "\nCar[" << i << "]" << ":" << car[i];

        if(estado > 550 || estado < 0){
            estado = 0;
        }

        ant = columna;
        columna = relaciona(car[i], columna);
        estado = Matriz(estado,columna);
        //qInfo() << "        Valor de Columna:" << columna << "  Valor de Estado" << estado;
        // qInfo() << "        Valor de Estado:" << estado << "    Valor de Columna:" << columna;
        cad += car[i];
        // qInfo() << "            Valor de cad: " << cad;
        QString caaarmeeeen = cad;
        bool ver = false, ver2 = false;

        if (estado < 100){
            if (((car[i] >= 97 && car[i] <= 122) || car[i] >= 68 && car[i] <= 90) && //mayus y minus
                    car[i+1] == '<' || car[i+1] == '>' || car[i+1] == '(' || car[i+1] == ')' || car[i+1] == ';' || car[i+1] == ','
                    || car[i+1] == '+' || car[i+1] == '-' || car[i+1] == '*' || car[i+1] == '/'
                    || car[i+1] == 9 || car[i+1] == 10 || car[i+1] == 32 || car[i+1] == 92){
                if (estado < 100){
                    int provCol = relaciona(car[i+1], columna);
                    estado = Matriz(estado, provCol);
                    // qInfo() << "¬ø¬ø¬ø¬ø¬ø";
                }
            }
            if ((car[i] == '<' || car[i] == '>' || car[i] == '(' || car[i] == ')' || car[i] == '*') &&
                    ((car[i+1] == 9 || car[i+1] == 10 || car[i+1] == 32)
                     || ((car[i+1] >= 97 && car[i+1] <= 122) || (car[i+1] >= 68 && car[i+1] <= 90)))){
                if (estado < 100){
                    int provCol = relaciona(car[i+1], columna);
                    estado = Matriz(estado, provCol);
                    // qInfo() << "????";
                }
            }
        }

        cadenita = cad;
        // qInfo() << "                    Cadenita hasta el momento:" << cadenita;

        if (estado == 100){
            bool verif = true;
            for (int j = 0; j < pRes.size(); j++) {
                //qInfo() << "            Palabra reservada[" << j << "]:" << pRes[j] << "Cad hasta el momento:" << cad;
                if (cadenita == pRes.at(j) || cad == pRes.at(j)){
                    //qInfo() << "                En el if de estado 100 cad == pRes[" << j << "]";
                    j = 35;
                    agregarTabla(estado,cadenita,Token(estado));
                    tokenz.insert(tokenkonk,estado);
                    lexemaz.insert(lexkonk,cadenita);
                    tokenkonk++;
                    lexkonk++;
                    verif = false;
                    estado = 0;
                    cad = "";
                }
            }
            if (verif == true){
                //qInfo() << "                Cambia el valor de estado a 101";
                estado = 101;
            }
        }
        if (estado >= 101 && estado <= 140){
            agregarTabla(estado,cad,Token(estado));
            tokenz.insert(tokenkonk,estado);
            lexemaz.insert(lexkonk,cadenita);
            tokenkonk++;
            lexkonk++;
            estado = 0;
            cad = "";
        } else if (estado >= 499 && estado <= 515){
            if (car[i] == 9 && estado != 506){
                errores = ui->txtErrores->toPlainText() + Error(estado) + "( tabulador )" + "\n";
            } else if (car[i] == 10 && estado != 506){
                errores = ui->txtErrores->toPlainText() + Error(estado) + "( enter )" + "\n";
            } else if (car[i] == 32 && estado != 506){
                errores = ui->txtErrores->toPlainText() + Error(estado) + "( espacio )" + "\n";
            } else if (estado != 506){
                errores = ui->txtErrores->toPlainText() + Error(estado) + "(" + cad + ")" + "\n";
            }
            ui->txtErrores->setPlainText("");
            ui->txtErrores->insertPlainText(errores);
            estado = 0;
            errores = "";
            cad = "";
        }
    }

    QList<int> NextToken;
    int aum = 0;
    for(int i = 0; i < tokenz.size(); i++){
        int aitem = tokenz.at(i);
        //qInfo() << "Item [" << i << "]: " << aitem;
        QString lexema = lexemaz.at(i);
        //qInfo() << "Lexema: " << lexema << "\n";
        if (aitem == 100){ //palabra reservada
            if (lexema == "class"){
                NextToken.insert(aum, 1003);
                aum++;
            } else if(lexema == "endclass"){
                NextToken.insert(aum, 1005);
                aum++;
            } else if(lexema == "int"){
                NextToken.insert(aum, 1014);
                aum++;
            } else if(lexema == "float"){
                NextToken.insert(aum, 1015);
                aum++;
            } else if(lexema == "char"){
                NextToken.insert(aum, 1016);
                aum++;
            } else if(lexema == "string"){
                NextToken.insert(aum, 1017);
                aum++;
            } else if(lexema == "bool"){
                NextToken.insert(aum, 1018);
                aum++;
            } else if(lexema == "if"){
                NextToken.insert(aum, 1049);
                aum++;
            } else if(lexema == "else"){
                NextToken.insert(aum, 1052);
                aum++;
            } else if(lexema == "elseif"){
                NextToken.insert(aum, 1051);
                aum++;
            } else if(lexema == "endif"){
                NextToken.insert(aum, 1050);
                aum++;
            } else if(lexema == "do"){
                NextToken.insert(aum, 1043);
                aum++;
            } else if(lexema == "eval"){
                NextToken.insert(aum, 1047);
                aum++;
            } else if(lexema == "enddo"){
                NextToken.insert(aum, 1048);
                aum++;
            } else if(lexema == "while"){
                NextToken.insert(aum, 1045);
                aum++;
            } else if(lexema == "endwhile"){
                NextToken.insert(aum, 1046);
                aum++;
            } else if(lexema == "read"){
                NextToken.insert(aum, 1028);
                aum++;
            } else if(lexema == "write"){
                NextToken.insert(aum, 1029);
                aum++;
            } else if(lexema == "def"){
                NextToken.insert(aum, 1006);
                aum++;
            } else if(lexema == "as"){
                NextToken.insert(aum, 1007);
                aum++;
            } else if(lexema == "for"){
                NextToken.insert(aum, 1041);
                aum++;
            } else if(lexema == "endfor"){
                NextToken.insert(aum, 1044);
                aum++;
            } else if(lexema == "private"){
                NextToken.insert(aum, 1009);
                aum++;
            } else if(lexema == "public"){
                NextToken.insert(aum, 1008);
                aum++;
            } else if(lexema == "protected"){
                NextToken.insert(aum, 1010);
                aum++;
            } else if(lexema == "library"){
                NextToken.insert(aum, 1000);
                aum++;
            } else if(lexema == "func"){
                NextToken.insert(aum, 1026);
                aum++;
            } else if(lexema == "endfunc"){
                NextToken.insert(aum, 1027);
                aum++;
            } else if(lexema == "main"){
                NextToken.insert(aum, 1020);
                aum++;
            } else if(lexema == "endmain"){
                NextToken.insert(aum, 1023);
                aum++;
            } else if(lexema == "true"){

            } else if(lexema == "false"){

            } else if(lexema == "to"){
                NextToken.insert(aum, 1042);
                aum++;
            } else if(lexema == "void"){
                NextToken.insert(aum, 1019);
                aum++;
            } else if(lexema == "local"){
                NextToken.insert(aum, 1024);
                aum++;
            } else if(lexema == "endlocal"){
                NextToken.insert(aum, 1025);
                aum++;
            }
        } else if(aitem == 101){
            NextToken.insert(aum, 1004);
            aum++;
        } else if(aitem == 102){
            NextToken.insert(aum, 1012);
            aum++;
        } else if(aitem == 103){
            NextToken.insert(aum, 1067);
            aum++;
        } else if(aitem == 104){
            NextToken.insert(aum, 1068);
            aum++;
        } else if(aitem == 105){
            NextToken.insert(aum, 1056);
            aum++;
        } else if(aitem == 106){
            NextToken.insert(aum, 1057);
            aum++;
        } else if(aitem == 107){
            NextToken.insert(aum, 1058);
            aum++;
        } else if(aitem == 108){
            NextToken.insert(aum, 1059);
            aum++;
        } else if(aitem == 109){
            NextToken.insert(aum, 1031);
            aum++;
        } else if(aitem == 110){
            NextToken.insert(aum, 1061);
            aum++;
        } else if(aitem == 111){
            NextToken.insert(aum, 1063);
            aum++;
        } else if(aitem == 112){
            NextToken.insert(aum, 1064);
            aum++;
        } else if(aitem == 113){
            NextToken.insert(aum, 1065);
            aum++;
        } else if(aitem == 114){
            NextToken.insert(aum, 1066);
            aum++;
        } else if(aitem == 115){
            NextToken.insert(aum, 1055);
            aum++;
        } else if(aitem == 116){
            NextToken.insert(aum, 1062);
            aum++;
        } else if(aitem == 117){
            NextToken.insert(aum, 1054);
            aum++;
        } else if(aitem == 118){
            NextToken.insert(aum, 1053);
            aum++;
        } else if(aitem == 119){
            NextToken.insert(aum, 1021);
            aum++;
        } else if(aitem == 120){
            NextToken.insert(aum, 1022);
            aum++;
        } else if(aitem == 121){
            NextToken.insert(aum, 1037);
            aum++;
        } else if(aitem == 122){
            NextToken.insert(aum, 1038);
            aum++;
        } else if(aitem == 123){
            NextToken.insert(aum, 1002);
            aum++;
        } else if(aitem == 124){
            NextToken.insert(aum, 1011);
            aum++;
        } else if(aitem == 125){
            NextToken.insert(aum, 1069);
            aum++;
        } else if(aitem == 126){
            NextToken.insert(aum, 1070);
            aum++;
        } else if(aitem == 127){

        } else if(aitem == 128){
            NextToken.insert(aum, 1039);
            aum++;
        } else if(aitem == 129){
            NextToken.insert(aum, 1032);
            aum++;
        } else if(aitem == 130){
            NextToken.insert(aum, 1040);
            aum++;
        } else if(aitem == 131){
            NextToken.insert(aum, 1033);
            aum++;
        } else if(aitem == 132){
            NextToken.insert(aum, 1058);
            aum++;
        } else if(aitem == 133){
            NextToken.insert(aum, 1034);
            aum++;
        } else if(aitem == 134){
            NextToken.insert(aum, 1035);
            aum++;
        } else if(aitem == 135){
            NextToken.insert(aum, 1036);
            aum++;
        } else if(aitem == 136){
            NextToken.insert(aum, 1060);
            aum++;
        } else if(aitem == 137){
            NextToken.insert(aum, 1013);
            aum++;
        } else if(aitem == 138){

        } else if(aitem == 139){

        } else if(aitem == 140){

        } else if(aitem == 141){
            NextToken.insert(aum, 1071);
            aum++;
        }
        //sintac += i + ". " + sentencia.at(i) + "\n";
        //qInfo() << "Valor del token en [" << NextToken.size() << "]: " << NextToken.value(i) << "\n";
    }
    NextToken.insert(NextToken.size(),1071);

    for (int i = 0; i < NextToken.size(); i++) {
        // qInfo() << "Iteraci√≥n:" << i << "\n    Valor de token:" << NextToken.at(i) << "\n";
    }

    // qInfo() << "NextToken ya tiene todo";
    //QMessageBox msgBx; msgBx.setText(texto); msgBx.exec();

    QList<int> pila; pila.insert(0, 1071); pila.insert(1, 0);

    int iteracion = 0; int sizeNT = NextToken.size();
    while (!pila.isEmpty()){
        // qInfo() << "\nIteraci√≥n " << iteracion;

        int valPila = pila.at(pila.size()-1);
        int valNT = NextToken.value(0);

        // qInfo() << "TOPE DE LA PILA:" << valPila;
        for (int i = 0; i < pila.size(); i++) {
            // qInfo() << "    Pila en [" << i << "]:" << pila.at(i);
        }

        // qInfo() << "PRIMERO DE NEXTTOKEN:" << valNT;
        // qInfo() << "SIZE DE PILA:"<< pila.size();
        // qInfo() << "SIZE DE NEXTTOKEN:" << NextToken.size();
        // qInfo() << "ITERACI√ìN DE NEXTTOKEN:" << sizeNT - NextToken.size();

        if (valPila >= 1000){
            //qInfo() << "    Pila =" << valPila << "; es mayor o igual a 1000";
            if ((valPila == valNT) && (valNT == 1071)){
                // qInfo() << "            Input correcto! :D";
                //sint *correcto = new sint;
                //correcto->show();
                pila.removeLast();
                NextToken.removeFirst();
            } else {
                if ((valPila == valNT) && (valNT != 1071)){
                    // qInfo() << "        PILA = TOKEN; Remueve el √∫ltimo de PILA(" << valPila << ") & NEXTTOKEN (" << valNT << ")";
                    pila.removeLast();
                    NextToken.removeFirst();
                } else {
                    for(int i = 0; i < pila.size(); i++){
                        pila.removeAt(i);
                    }
                    pila.removeAt(0);
                    //QString espera = esperaba(2);
                    QMessageBox error; error.setText("Error! Se esperaban first/follows"); error.exec();
                }
            }
        } else if (valPila == -1){
            // qInfo() << "            Se remueve el √∫ltimo porque es -1";
            pila.removeLast();
        } else if (valPila <= 113){
            // qInfo() << "    Pila = " << valPila << "; es menor o igual a 113";
            int x = MPredictiva(valPila,valNT-1000);
            // qInfo() << "        Matriz predicriva va a:" << x << ", con x";
            if (x >= 0 && x <= 113){
                pila.removeLast();
                QList<int> aux = producciones(x);
                for(int i = 0; i < aux.size(); i++){
                    // qInfo() << "        Aux en {" << i << "]: " << aux.value(i);
                    pila.insert(pila.size(),aux.value(i));
                }
            } else {
                pila.removeLast();
            }
        }
        iteracion++;
    }

    // qInfo() << "SIZE DE PILA:"<< pila.size();
    // qInfo() << "SIZE DE NEXTTOKEN:" << NextToken.size();



    QString patas = ui->table->item(10,1)->text();
    qInfo() << "\nItem: " << patas;

    semantico();

    int contador = 0;
    int temporalTipos = 1;
    int temporalCuadruplos = 1;

    cuadruplos();
}

void Widget::semantico(){
    qInfo() << "\n\nEMPIEZA EL SEM√ÅNTICO\n";
    bool bul2 = true;
    //semOpnd.append("quitar");
    for (int i = 0; i < ui->table->rowCount()-1; i++){
        //qInfo() << "Analizando " << ui->table->item(i,1)->text() << ", i = " << i;
        if (ui->table->item(i,1)->text() == "def"){
            buliano = true;
        } else if (ui->table->item(i,1)->text() == ";"){
            buliano = false;
        } else if (ui->table->item(i,1)->text() == "for"){
            //qInfo() << "    Se cierra bul2, ahora es falso";
            bul2 = false;
        } else if (ui->table->item(i,1)->text() == "do" && ui->table->item(i-6,1)->text() == "for"){
            //qInfo() << "    bul2 = true";
            bul2 = true;
        }
        if (bul2 == true){
            if (buliano == true){
                if (ui->table->item(i,0)->text() == "101"){ //METER OPERANDOS
                    operandos.append(ui->table->item(i,1)->text());
                    contador++;
                }
                if (ui->table->item(i,1)->text() == "as"){ //INSERTAR EL TIPO DE LAS VARIABLES
                    for (int j = 0; j < contador; j++) {
                        tipo.append(ui->table->item(i+1,1)->text());
                    }
                    contador = 0;
                }
            } else {
                if (ui->table->item(i,1)->text() == "+"  || ui->table->item(i,1)->text() == "-"  || ui->table->item(i,1)->text() == "*"  ||
                        ui->table->item(i,1)->text() == "/" || ui->table->item(i,1)->text() == "=" || ui->table->item(i,1)->text() == "+=" ||
                        ui->table->item(i,1)->text() == ";"){
                    if (ui->table->item(i,1)->text() != ";"){
                        operadores.append(ui->table->item(i,1)->text());
                        oprsSeparador.append(" ");
                        /*qInfo() << "Elemento arriba: " << ui->table->item(i-1,1)->text() << ", tipo: " << ui->table->item(i-1,0)->text();
                    qInfo() << "    semOpnd -1: " << semOpnd.at(semOpnd.length()-1);
                    qInfo() << "        Elemento abajo" << ui->table->item(i+1,1)->text() << ", tipo: " << ui->table->item(i+1,0)->text() << "\n";*/
                        if (ui->table->item(i-1,0)->text() == "101" || ui->table->item(i-1,0)->text() == "102"){
                            semOpnd.append(ui->table->item(i-1,1)->text());
                            semOpndSeparador.append(" ");
                        }
                    } else {
                        if (ui->table->item(i-2,1)->text() == "+"  || ui->table->item(i-2,1)->text() == "-"  || ui->table->item(i-2,1)->text() == "*" ||
                                ui->table->item(i-2,1)->text() == "/" || ui->table->item(i-2,1)->text() == "=" || ui->table->item(i-2,1)->text() == "+="){
                            oprsSeparador.removeLast();
                            oprsSeparador.append(";");
                        }
                        if ((ui->table->item(i-1,0)->text() == "101" || ui->table->item(i-1,0)->text() == "102")&& (ui->table->item(i-2,1)->text() == "+"  ||
                                                                                                                    ui->table->item(i-2,1)->text() == "-"  ||
                                                                                                                    ui->table->item(i-2,1)->text() == "*"  ||
                                                                                                                    ui->table->item(i-2,1)->text() == "/" ||
                                                                                                                    ui->table->item(i-2,1)->text() == "=" ||
                                                                                                                    ui->table->item(i-2,1)->text() == "+=")){
                            semOpnd.append(ui->table->item(i-1,1)->text());
                            semOpndSeparador.append(";");
                        }
                    }
                }
            }
        }
    }
    semOpnd.removeFirst();

    //CICLO PARA VER LO QUE TIENE OPERANDOS
    for (int i = 0; i < operandos.length() ; i++) {
        qInfo() << "Operando en " << i << operandos.at(i) << ", tipo:" << tipo.at(i) << "\n";
        tablaTipos(operandos.at(i), tipo.at(i));
    }

    /*//CICLO PARA VER LOS OPERADORES
    for (int i = 0; i < operadores.length(); i++) {
        qInfo() << "        Operador en " << i << operadores.at(i) << ", " << oprsSeparador.at(i) << "\n";
    }

    //CICLO PARA VER LOS OPERANDOS PARA LAS OPERACIONES
    for (int i = 0; i < semOpnd.length(); i++) {
        qInfo() << "            Operando en " << i << semOpnd.at(i) << ", " << semOpndSeparador.at(i) << "\n";
    }*/

    //ELIMINAR TIPOS REDUNDANTES
    int redun = 0;
    for (int i = 0; i < operandos.length(); i++) {
        for (int j = 0; j < operandos.length(); j++) {
            if (operandos.at(i) == operandos.at(j) && tipo.at(i) != tipo.at(j) && i != j){
                ui->txtErrores->appendPlainText("Declaraci√≥n de variables m√∫ltiples en un √°mbito: " + operandos.at(i) + " es de tipo " + tipo.at(i));
                operandos.removeAt(j);
                tipo.removeAt(j);
                tiposNota("Declaraci√≥n de variables m√∫ltiples en un √°mbito");
            }
        }
    }

    //DECLARACI√ìN DE VARIABLES NO DEFINIDAS
    bool container = false;
    for (int i = 0; i < semOpnd.length(); i++) {
        container = false;
        for (int j = 0; j < operandos.length(); j++) {
            if (semOpnd.at(i) == operandos.at(j)){
                container = true;
            } else if (j == operandos.length()-1 && container == false){
                //qInfo() << "                            Meter variable no definida";
                operandos.append(semOpnd.at(i));
                ui->txtErrores->appendPlainText("Error: Variable " + operandos.at(operandos.length()-1) + " no asignada, asignandole el tipo int");
                tipo.append("int");
                tablaTipos(operandos.at(operandos.length()-1), tipo.at(tipo.length()-1));
                tiposNota("Error; Variable no definida.");
            }
        }
    }

    /*for (int i = 0; i < operandos.length() ; i++) {
        qInfo() << "Operando en " << i << operandos.at(i) << ", tipo #" << i << tipo.at(i) << "\n";
        tablaTipos(operandos.at(i), tipo.at(i));
    }*/

    QList<QString> auxOperandos;
    QList<QString> auxOperadores;
    int opnd = 0; int oprs = 0, contadorSem = 0;;
    bool ops1 = true; bool ops2 = true;
    while (contadorSem < semOpnd.length()){
        if (ops1 == true){
            //qInfo() << "Ingresando al auxiliar: " << semOpnd.at(opnd) << "     Valor de oprs: " << opnd;
            auxOperandos.append(semOpnd.at(opnd));
            opnd++;
        }
        if (ops2 == true){
            //qInfo() << "Ingresando al auxiliar: " << operadores.at(oprs) << "     Valor de oprs: " << oprs;
            auxOperadores.append(operadores.at(oprs));
            oprs++;
        }
        if (semOpndSeparador.at(opnd) == ";"){
            //qInfo() << "Ingresando al auxiliar: " << semOpnd.at(opnd) << "     Valor de oprs: " << opnd;
            auxOperandos.append(semOpnd.at(opnd));
            opnd++;
            ops1 = false;
        }
        if (semOpndSeparador.at(oprs) == ";"){
            ops2 = false;
        }
        if (ops1 == false){
            ops1 = true;
            ops2 = true;
            //qInfo() << "        Antes del m√©todo";
            ingresaTipos(auxOperandos, auxOperadores);
            while (auxOperadores.length() != 0) {
                auxOperadores.removeAt(auxOperadores.length()-1);
            }
            while (auxOperandos.length() != 0) {
                auxOperandos.removeAt(auxOperandos.length()-1);
            }
            //qInfo() << "        Despu√©s del m√©todo";
        }
        qInfo() << "Valor de opnd: " << contadorSem;
        if (semOpnd.length() == opnd){
            break;
        }
        contadorSem++;
    }
}

void Widget::ingresaTipos(QList<QString> a, QList<QString> b){
    //qInfo() << "Ingresa Tipos";
    QList<QString> conc;
    for (int i = 0; i < a.length(); i++){
        qInfo() << "    Operando en " << i << ", " << a.at(i);
    }

    for (int i = 0; i < b.length(); i++){
        qInfo() << "    Operador en " << i << ", " << b.at(i);
    }

    for (int i = 0; i < a.length(); i++) {
        conc.append(a.at(i));
        if (i < b.length()){
            conc.append(b.at(i));
        }
    }

    QString res = operacionTipos(conc);
    qInfo() << "Valor de res: " << res;

    //IMPRIMIR EN LA TABLA
}

QString op1, op2, op, tipazo;

QString Widget::operacionTipos(QList<QString> concatenacion){
    QString R;
    //QString op1, op2, op, tipazo;
    QList<QString> conc;
    QList<QString> concTipos;
    bool v = false;
    int longitudinal = concatenacion.length();
    QString tipoFondoPila = "";

    //qInfo() << "                Tama√±o concatenaci√≥n: " << concatenacion.length() << ", Tama√±o concTipos: " << concTipos.length();
    //Ciclo para igualar las pilas concatenacion y concTipos
    for (int i = 0; i < concatenacion.length(); i++ ){
        for (int j = 0; j < operandos.length(); j++) {
            qInfo() << "            Comparando " << concatenacion.at(i) << " con " << operandos.at(j) << ", de tipo " << tipo.at(j);
            if (concatenacion.at(i) == operandos.at(j)){
                qInfo() << "                Encontr√≥ igualdad. concTipos en" << i << "(" << concatenacion.at(i) << ") ahora vale" << tipo.at(j);
                concTipos.append(tipo.at(j));
                break;
            } else if(concatenacion.at(i) == "+" || concatenacion.at(i) == "-" || concatenacion.at(i) == "*" || concatenacion.at(i) == "/" ||
                      concatenacion.at(i) == "^" || concatenacion.at(i) == "(" || concatenacion.at(i) == ")" || concatenacion.at(i) == "+=" ||
                      concatenacion.at(i) == "-=" || concatenacion.at(i) == "=" || concatenacion.at(i) == "=="){
                qInfo() << "                Encontr√≥ igualdad. concTipos en" << i << "ahora est√° vac√≠o";
                concTipos.append("");
                break;
            }
        }
    }

    for (int i = 0; i < concatenacion.length(); i++) {
        qInfo() << "                ID: " << concatenacion.at(i) << ", Tipo: " << concTipos.at(i);
    }

    for (int i = 0; i < concatenacion.length(); i++){ //Ciclo para los par√©ntesis
        if (concatenacion.at(i) == "("){
            v = true;
        } else if (concatenacion.at(i) == ")"){
            v = false;
        }

        if (v == true){
            conc.append(concatenacion.at(i));
        }
    }
    if (conc.length() > 2){
        R = operacionTipos(conc);
    }

    for (int i = 0; i < concatenacion.length(); i++){ //ciclo para potencia y raiz
        if (concatenacion.at(i) == "^"){
            op2 = concTipos.at(i+1); //El que est√° a la derecha
            concatenacion.removeAt(i+1);
            concTipos.removeAt(i+1);

            op = concatenacion.at(i);
            concatenacion.removeAt(i); //Operador
            concTipos.removeAt(i);

            op1 = concTipos.at(i-1); //El que est√° a la izquierda
            concatenacion.removeAt(i-1);
            concTipos.removeAt(i-1);

            tipazo = matrizTipos(op1, op2, op);
            if (tipazo == "x"){
                ui->txtErrores->appendPlainText("Error entre tipos: " + op1 + " " + op + " " + op2 + " = " + tipazo);
                qInfo() << "Error entre tipos: " + op1 + " " + op + " " + op2 + " = " + tipazo;
                tipazo = op1;
            }

            //guardamos el nuevo valor, Rn, en pila de operandos
            QString erre = "R";
            erre += QString::number(temporalTipos);
            temporalTipos++;

            concatenacion.append((erre));
            concTipos.append(tipazo);
            longitudinal = concatenacion.length();
            //qInfo() << "    Longitud de la lista: " << concatenacion.length();
        }
    }

    for (int i = 0; i < longitudinal; i++){ //ciclo para multiplicaciones y divisiones
        qInfo() << "    Valor de I: " << i << ", Valor de Longitudinal: " << longitudinal << ", Longitud de la lista: " << concatenacion.length();
        if (concatenacion.at(i) == "*" || concatenacion.at(i) == "/"){
            qInfo() << "        Asignando: OP2 =" << concTipos.at(i+1) << ", OPER =" << concatenacion.at(i) << ", OP1 =" <<concTipos.at(i-1);
            op2 = concTipos.at(i+1); //El que est√° a la derecha
            concatenacion.removeAt(i+1);
            concTipos.removeAt(i+1);
                qInfo() << "                        Se asign√≥ op2: " << op2;
            op = concatenacion.at(i);
            concatenacion.removeAt(i); //Operador
            concTipos.removeAt(i);
            qInfo() << "                        Se asign√≥ oper: " << op;

            op1 = concTipos.at(i-1); //El que est√° a la izquierda
            qInfo() << "                    Se asign√≥ op1: " << op1;

            concatenacion.removeAt(i-1);
            concTipos.removeAt(i-1);
            /*qInfo() << "+++++El valor de op1: " << op1;
            qInfo() << "+++++El valor de op2: " << concTipos.at(i-1);*/
            tipazo = matrizTipos(op1, op2, op);
            qInfo() <<" ++++++++Tipazo sin x: " << tipazo;

            if (tipazo == "x"){
                ui->txtErrores->appendPlainText("Error entre tipos: " + op1 + " " + op + " " + op2 + " = " + tipazo);
                qInfo() <<" ++++++++Tipazo mal: " << tipazo;
                qInfo() << "Error entre tipos: " + op1 + " " + op + " " + op2 + " = " + tipazo;
                tipazo = op1;
                qInfo() <<" ++++++++Tipazo parchado: " << tipazo;
            }

            //guardamso el nuevo valor, Rn, en pila de operandos
            QString erre = "R";
            erre += QString::number(temporalTipos);
            temporalTipos++;

            concatenacion.append((erre));
            concTipos.append(tipazo);
            longitudinal = concatenacion.length();
            //qInfo() << "    Longitud de la lista: " << concatenacion.length();
        }
    }

    for (int i = 0; i < concatenacion.length(); i++){ //ciclo para sumas y restas
        //qInfo() << "    Valor de I: " << i << ", Valor de Longitudinal: " << longitudinal << ", Longitud de la lista: " << concatenacion.length();
        if (concatenacion.at(i) == "+" || concatenacion.at(i) == "-"){
            op2 = concTipos.at(i+1); //El que est√° a la derecha
            QString imp = op2;
            qInfo() << " **********************La variable op2: "<<op2;
            concatenacion.removeAt(i+1);
            concTipos.removeAt(i+1);

            op = concatenacion.at(i);
            concatenacion.removeAt(i); //Operador
            concTipos.removeAt(i);

            op1 = concTipos.at(i-1); //El que est√° a la izquierda
            QString imp2 = op;
            qInfo() << " **********************La variable op1: "<<op1;
            concatenacion.removeAt(i-1);
            concTipos.removeAt(i-1);
            qInfo() << "                        El operando2 es: " << imp;
            qInfo() << "                        El operando2 es: " << imp2;
            tipazo = matrizTipos(op1, op2, op);


            if (tipazo == "x"){
                //ui->txtErrores->appendPlainText("Error entre tipos: " + concatenacion.at(0) + " y " + concatenacion.at(2));
                qInfo() << "Error entre tipos: " + op1 + " " + op + " " + op2 + " = " + tipazo;
                tipazo = op1;
            }

            //guardamso el nuevo valor, Rn, en pila de operandos
            QString erre = "R";
            erre += QString::number(temporalTipos);
            temporalTipos++;

            concatenacion.append((erre));
            concTipos.append(tipazo);
            longitudinal = concatenacion.length();
            //qInfo() << "    Longitud de la lista: " << concatenacion.length();
        }
    }

    if (concatenacion.length() == 3){

        for (int i = 0; i < operandos.length(); i++){
            //qInfo() << "    Operando en " << i << ": " << operandos.at(i);
            if (operandos.at(i) == concatenacion.at(0)){
                tipoFondoPila = tipo.at(i);
                break;
            }
        }

        if (tipoFondoPila == concTipos.at(concTipos.length()-1)){
            qInfo() << "TODO BIEN :DDDDDD";
            qInfo() << "Tipo fondo pila: " << tipoFondoPila << "     concTipos:  " << concTipos.at(concTipos.length()-1);
        } else {
            qInfo() << "                    Aqui hubo un error entre tipos: ";
            ui->txtErrores->appendPlainText("Error entre tipos: " + concatenacion.at(0) + " = " + concatenacion.at(2));
            qInfo() << "Tipo fondo pila: " << tipoFondoPila << "     concTipos:  " << concTipos.at(concTipos.length()-1);
        }
        R = tipoFondoPila;
    } else {
        qInfo() << "Algo se hizo mal :(";
    }

    return R;
}

QString Widget::matrizTipos(QString op1, QString op2, QString oper){

    int fila = 0;
    int col = 0;

    if(op2 == "int"){
        fila = 0;
    } else if(op2 == "float"){
        fila = 1;
    } else if(op2 == "char"){
        fila = 2;
    } else if(op2 == "string"){
        fila = 3;
    } else if(op2 == "bool"){
        fila = 4;
    }


    if(oper == "+"){
        col = 1;
    } else if(oper == "-"){
        col = 2;
    } else if(oper == "*" || oper == "/"){
        col = 3;
    } else if(oper == "||" || oper == "&&"){
        col = 4;
    } else if(oper == "%"){
        col = 5;
    } else if(oper == "+="){
        col = 6;
    } else if(oper == "-=" || oper == "*=" || oper == "/=" || oper == "%="){
        col = 7;
    } else if(oper == "<" || oper == ">" || oper == "<=" || oper == ">="){
        col = 8;
    } else if(oper == "==" || oper == "!="){
        col = 9;
    }

    QString ent[5][11] = {
        {"int","int", "int", "int", "bool", "int", "int", "int", "bool", "bool"},
        {"float","float", "float", "float", "bool", "int", "float", "float", "bool", "bool"},
        {"char","x", "x", "x", "bool", "x", "x", "x", "x", "x"},
        {"string","x", "x", "x", "bool", "x", "x", "x", "x", "x"},
        {"bool","x", "x", "x", "bool", "x", "x", "x", "x", "x"}
    };

    QString flota[5][11] = {
        {"int","float", "float", "float", "bool", "int", "float", "float", "bool", "bool"},
        {"float","float", "float", "float", "bool", "int", "float", "float", "bool", "bool"},
        {"char","x", "x", "x", "x", "x", "x", "x", "x", "x"},
        {"string", "x", "x", "x", "x", "x", "x", "x", "x", "x"},
        {"bool","x", "x", "x", "x", "x", "x", "x", "x", "x"}
    };

    QString carac[5][11] = {
        {"int","x", "x", "x", "x", "x", "x", "x", "x", "x"},
        {"float","x", "x", "x", "x", "x", "x", "x", "x", "x"},
        {"char","string", "x", "x", "bool", "x", "x", "x", "x", "bool"},
        {"string","string", "x", "x", "bool", "x", "x", "x", "x", "x"},
        {"bool","x", "x", "x", "x", "x", "x", "x", "x", "x"}
    };

    QString cadena[5][11] = {
        {"int","x", "x", "x", "x", "x", "x", "x", "x", "x"},
        {"float","x", "x", "x", "x", "x", "x", "x", "x", "x"},
        {"char","string", "x", "x", "x", "x", "string", "x", "x", "x"},
        {"string","string", "x", "x", "x", "x", "string", "x", "x", "bool"},
        {"bool","x", "x", "x", "x", "x", "x", "x", "x", "x"}
    };

    QString bolian[5][11] = {
        {"int","x", "x", "x", "x", "x", "x", "x", "x", "x"},
        {"float","x", "x", "x", "x", "x", "x", "x", "x", "x"},
        {"char","x", "x", "x", "x", "x", "x", "x", "x", "x"},
        {"string","x", "x", "x", "x", "x", "x", "x", "x", "x"},
        {"bool","x", "x", "x", "bool", "x", "x", "x", "x", "bool"}
    };


    if(op1 == "int"){
        return ent[fila][col];
    } else if(op1 == "float"){
        return flota[fila][col];
    } else if(op1 == "char"){
        return carac[fila][col];
    } else if(op1 == "string"){
        return cadena[fila][col];
    }  else if(op1 == "bool"){
        return bolian[fila][col];
    }

    return "x";
}

void Widget::tablaTipos(QString var, QString tipo)
{
    int fila;
    ui->tablaTipos->insertRow(ui->tablaTipos->rowCount());
    fila = ui->tablaTipos->rowCount()-1;
    ui->tablaTipos->setItem(fila, 0, new QTableWidgetItem(var));
    ui->tablaTipos->setItem(fila, 1, new QTableWidgetItem(tipo));
}

void Widget::tiposNota(QString nota){
    int fila;
    fila = ui->tablaTipos->rowCount()-1;
    ui->tablaTipos->setItem(fila, 2, new QTableWidgetItem(nota));
}

QString Widget::erroresSemantico(int x){
    QString error = "";
    switch(x){
    case 1:
        error = "No coinciden los tipos";
        break;
    case 2:
        error = "Variable no declarada";
        break;
    case 3:
        error = "Identificador reservado, uso indebido";
        break;
    case 4:
        error = "Declaraci√≥n de variables m√∫ltiples en un √°mbito";
        break;
    case 5:
        error = "Acceder a una variable fuera de alcance";
        break;
    case 6:
        error = "Par√°metro formal y real no coincide";
        break;
    case 7:
        break;
    case 8:
        break;
    }
    return error;
}

void Widget::cuadruplos(){
    semOpnd.clear();
    qInfo() << "\n\nEMPIEZAN LOS CUADRUPLOS";
    qInfo() << "    Longitud de semOpnd:" << semOpnd.length();
    for (int i = 0; i < ui->table->rowCount()-1; i++){
        qInfo() << "Valorando: " << ui->table->item(i,1)->text() << " en la pos" << i+1 <<"de la tabla";
        if (ui->table->item(i,1)->text() == "if" || ui->table->item(i,1)->text() == "for" || ui->table->item(i,1)->text() == "while" ||
                ui->table->item(i,1)->text() == "do"){
            buliano = true;
        }

        if (buliano == true){  //Aqu√≠ guardamos las palabras reservadas desde un ciclo hasta que se acabe
            if (ui->table->item(i,0)->text() != "119" && ui->table->item(i,0)->text() != "120" && ui->table->item(i,0)->text() != "126" &&
                    ui->table->item(i,0)->text() != "123"){ //METER OPERANDOS
                //qInfo() << "    OPS.- Metiendo " << ui->table->item(i,1)->text();
                semOpnd.append(ui->table->item(i,1)->text());
                qInfo() << "    Metiendo " << ui->table->item(i,1)->text() << "\n";
                contador++;
            }

        } else {    //Aqu√≠ guardamos las operaciones que se hagan entremedias

            if (ui->table->item(i,1)->text() == "+"  || ui->table->item(i,1)->text() == "-"  || ui->table->item(i,1)->text() == "*"  ||
                    ui->table->item(i,1)->text() == "/" || ui->table->item(i,1)->text() == "=" || ui->table->item(i,1)->text() == "+=" ||
                    ui->table->item(i,1)->text() == ";"){
                if (ui->table->item(i,1)->text() != ";"){
                    if (ui->table->item(i-1,0)->text() == "101"){
                        qInfo() << "    Metiendo ID: " << ui->table->item(i-1,1)->text();
                        semOpnd.append(ui->table->item(i-1,1)->text());
                        //qInfo() << "    2) Metiendo " << ui->table->item(i-1,1)->text();
                        semOpndSeparador.append(" ");

                        //semOpnd.append(ui->table->item(i-1,1)->text());
                    }

                    semOpnd.append(ui->table->item(i,1)->text());
                    qInfo() << "    Metiendo " << ui->table->item(i,1)->text() << "\n";
                    //qInfo() << "    1) Metiendo " << ui->table->item(i,1)->text();
                    oprsSeparador.append(" ");
                    //qInfo() << "Elemento arriba: " << ui->table->item(i-1,1)->text() << ", tipo: " << ui->table->item(i-1,0)->text();
                    //qInfo() << "    semOpnd -1: " << semOpnd.at(semOpnd.length()-1);
                    //qInfo() << "        Elemento abajo" << ui->table->item(i+1,1)->text() << ", tipo: " << ui->table->item(i+1,0)->text() << "\n";
                } else {
                    if (ui->table->item(i-1,0)->text() == "101" && (ui->table->item(i-2,1)->text() == "+"  || ui->table->item(i-2,1)->text() == "-"  ||
                        ui->table->item(i-2,1)->text() == "*"  || ui->table->item(i-2,1)->text() == "/" || ui->table->item(i-2,1)->text() == "=" ||
                        ui->table->item(i-2,1)->text() == "+=")){
                        semOpnd.append(ui->table->item(i-1,1)->text());
                        qInfo() << "    Metiendo " << ui->table->item(i-1,1)->text() << "\n";
                        //qInfo() << "    3) Metiendo " << ui->table->item(i,1)->text();
                        semOpndSeparador.append(";");
                    }
                    if (ui->table->item(i-2,1)->text() == "+"  || ui->table->item(i-2,1)->text() == "-"  ||
                            ui->table->item(i-2,1)->text() == "*"  || ui->table->item(i-2,1)->text() == "/" || ui->table->item(i-2,1)->text() == "=" ||
                            ui->table->item(i-2,1)->text() == "+="){
                        oprsSeparador.removeLast();
                        semOpnd.append(";");
                    }
                }

            }

        }
        if (ui->table->item(i,1)->text() == "endif" || ui->table->item(i,1)->text() == "endfor" || ui->table->item(i,1)->text() == "endwhile" ||
                ui->table->item(i,1)->text() == "enddo"){
            //buliano = false;
        }
    }
    //qInfo() << "Primero de la pila semOpnd:" << semOpnd.first();
    //semOpnd.removeFirst();
    qInfo() << "    Valor√≥ y meti√≥ en la pila ...";

    //CICLO PARA VER LOS OPERADORES
    for (int i = 0; i < operadores.length(); i++) {
        qInfo() << "    Operador en " << i << operadores.at(i) << ", " << oprsSeparador.at(i) << "\n";
    }

    //CICLO PARA VER LOS OPERANDOS PARA LAS OPERACIONES
    for (int i = 0; i < semOpnd.length(); i++) {
        qInfo() << "        Valor en " << i << semOpnd.at(i) << "\n";
    }

    //EMPEZAMOS A TRABAJAR CON LA TABLA DE CUADRUPLOS
    QList<QString> auxiliar;
    int par = 0, parido = 0, cont = 0, apunt = 0;
    QString aux = "";
    for (int i = 0; i < semOpnd.length(); i++){
        qInfo() << "ANALIZANDO: " << semOpnd.at(i) << " EN: " << i;

        if (semOpnd.at(i) != "if" && semOpnd.at(i) != "for" && semOpnd.at(i) != "while" && semOpnd.at(i) != "do"){
            //qInfo() << "  NO tenemos palabra reservada";
            cont++;
            //qInfo() << "    Contador = " << cont;

        } else if (semOpnd.at(i) == "if" || semOpnd.at(i) == "for" || semOpnd.at(i) == "while" || semOpnd.at(i) == "do"){
            for (apunt; apunt < cont; apunt++) {
                qInfo() << "    Metiendo en la pila auxiliar: " << semOpnd.at(apunt);
                auxiliar.append(semOpnd.at(apunt));
            }
            qInfo() << "    Llama a m√©todo jerarquiaCuadruplos";
            aux = jerarquiaCuadruplos(auxiliar);
            auxiliar.clear();
            qInfo() << "        Longitud del auxiliar: " <<auxiliar.length();
            //cont = 0;


            if (semOpnd.at(i) == "if" || semOpnd.at(i) == "while"){
                qInfo() << "        Va entrar a este ciclo con un " << semOpnd.at(i) << "\n             Va a meter a la tabla SF";
                QString erre = "R";
                erre += QString::number(temporalCuadruplos);
                temporalCuadruplos++;
                tablaCuadruplos(semOpnd.at(i+2), semOpnd.at(i+1), semOpnd.at(i+3), erre);
                tablaCuadruplos("SF", erre, "", "");

                tablaOperandos(semOpnd.at(i+1));
                tablaOperadores(semOpnd.at(i+2));
                tablaOperandos(semOpnd.at(i+3));
                tablaOperandos(erre);
                qInfo() << "                    Meti√≥ a pila de operandos y operadores";

                saltos.append(ui->tablaCuadruplos->rowCount());
                tablaSaltos(saltos.at(saltos.length()-1));
                qInfo() << "                Guarda " << ui->tablaCuadruplos->rowCount() << " en la pila de saltos";
                qInfo() << "                    Eliminando " << semOpnd.at(i+3) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+3);
                qInfo() << "                    Eliminando " << semOpnd.at(i+2) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+2);
                qInfo() << "                    Eliminando " << semOpnd.at(i+1) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+1);
                qInfo() << "                    Eliminando " << semOpnd.at(i) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i);
                i--;

            } else if (semOpnd.at(i) == "for"){
                qInfo() << "        Va entrar a este ciclo con un " << semOpnd.at(i) << "\n             Va a meter a la tabla SV";

                tablaCuadruplos(semOpnd.at(i+2), semOpnd.at(i+1), "", semOpnd.at(i+3));
                QString erre = "R";
                erre += QString::number(temporalCuadruplos);
                temporalCuadruplos++;

                tablaCuadruplos("<", semOpnd.at(i+1), semOpnd.at(i+5), erre);
                tablaCuadruplos("SV", erre, "", "");
                tablaOperadores(semOpnd.at(i+2));

                tablaOperandos(semOpnd.at(i+1));
                tablaOperadores(semOpnd.at(i+2));
                tablaOperandos(semOpnd.at(i+3));
                tablaOperandos(semOpnd.at(i+5));
                tablaOperandos(erre);
                qInfo() << "                    Meti√≥ a pila de operandos y operadores";

                saltos.append(ui->tablaCuadruplos->rowCount()+1);
                tablaSaltos(saltos.at(saltos.length()-1));

                qInfo() << "                    Eliminando " << semOpnd.at(i+6) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+6);
                qInfo() << "                    Eliminando " << semOpnd.at(i+5) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+5);
                qInfo() << "                    Eliminando " << semOpnd.at(i+4) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+4);
                qInfo() << "                    Eliminando " << semOpnd.at(i+3) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+3);
                qInfo() << "                    Eliminando " << semOpnd.at(i+2) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+2);
                qInfo() << "                    Eliminando " << semOpnd.at(i+1) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+1);
                qInfo() << "                    Eliminando " << semOpnd.at(i) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i);
                qInfo() << "                Elimin√≥ las instrucciones FOR de la pila";
                //i--;
            } else if (semOpnd.at(i) == "do"){
                qInfo() << "        Va entrar al ciclo DO con un " << semOpnd.at(i) << ", Va a meter a la tabla SI";
                qInfo() << "        SemOpnd en " <<i<< ":" << semOpnd.at(i);
                qInfo() << "            Metemos a la pila de saltos " << ui->tablaCuadruplos->rowCount()+1;
                saltos.append(ui->tablaCuadruplos->rowCount()+1);
                tablaSaltos(saltos.at(saltos.length()-1));
                semOpnd.removeAt(i);
                qInfo() << "        SemOpnd en " <<i<< ":" << semOpnd.at(i);
                i--;
            }
        }
        if(semOpnd.at(i) == "endfor" || semOpnd.at(i) == "endwhile" || semOpnd.at(i) == "enddo" || semOpnd.at(i) == "else" || semOpnd.at(i) == "elseif"
                || semOpnd.at(i) == "eval" || semOpnd.at(i) == "endif"){
            //qInfo() << "        Debi√≥ entrar a un END ";
            if (semOpnd.at(i) == "else"){
                qInfo() << "            ELSE";
                //RELLENAR SALTOS DE UN WHILE Y UN IF
                tablaCuadruplos("SI","","","");

                qInfo() << "        Metiendo " << ui->tablaCuadruplos->rowCount()+1 << ", en la tabla de cuadruplos, en la posici√≥n: " << saltos.at(saltos.length()-1);
                tablaCuad_MeterSalto(saltos.at(saltos.length()-1), ui->tablaCuadruplos->rowCount()+1);
                tablaSaltos(saltos.at(saltos.length()-1));
                saltos.append(ui->tablaCuadruplos->rowCount());
                qInfo() << "        Se eliminar√° el √∫ltimo de la pila de saltos";
                //saltos.removeLast();
                qInfo() << "        Se elimin√≥ el √∫ltimo de la pila de saltos";

                //qInfo() << "                Guarda " << ui->tablaCuadruplos->rowCount() << " en la pila de saltos";
            } else if (semOpnd.at(i) == "endif"){
                qInfo() << "    Saltos en [saltos.-1]: " << saltos.at(saltos.length()-1) << ", RowCount: " << ui->tablaCuadruplos->rowCount()+1;
                tablaCuad_MeterSalto(saltos.at(saltos.length()-1), ui->tablaCuadruplos->rowCount()+1);

            }else if (semOpnd.at(i) == "endwhile"){

                //RELLENAR SALTOS DE UN WHILE Y UN IF
                tablaCuadruplos("SI","","","");
                //qInfo() << "                Metemos en " << saltos.at(saltos.length()-1) << " esto " << ui->tablaCuadruplos->rowCount()+1;
                tablaCuad_MeterSalto(saltos.at(saltos.length()-1), ui->tablaCuadruplos->rowCount()+1);
                qInfo() << "    UI+1: " << ui->tablaCuadruplos->rowCount() << " ||| SALTOS AT SAL-1: " << saltos.at(saltos.length()-1);
                tablaCuad_MeterSalto(ui->tablaCuadruplos->rowCount(), saltos.at(saltos.length()-1));

                saltos.append(ui->tablaCuadruplos->rowCount());
                tablaSaltos(saltos.at(saltos.length()-1));
                qInfo() << "        Se eliminar√° el √∫ltimo de la pila de saltos";
                //saltos.removeLast();
                qInfo() << "        Se elimin√≥ el √∫ltimo de la pila de saltos";

                //qInfo() << "                Guarda " << ui->tablaCuadruplos->rowCount() << " en la pila de saltos";
            } else if (semOpnd.at(i) == "elseif"){
                qInfo() << "        Va entrar a ELSEIF con un " << semOpnd.at(i) << "\n             Va a meter a la tabla SF";
                QString erre = "R";
                erre += QString::number(temporalCuadruplos);
                temporalCuadruplos++;
                tablaCuadruplos(semOpnd.at(i+2), semOpnd.at(i+1), semOpnd.at(i+3), erre);
                tablaCuadruplos("SF", erre, "", "");

                qInfo() << "        Metiendo " << ui->tablaCuadruplos->rowCount()+1 << ", en la tabla de cuadruplos, en la posici√≥n: " << saltos.at(saltos.length()-1);
                tablaCuad_MeterSalto(saltos.at(saltos.length()-1), ui->tablaCuadruplos->rowCount()+1);
                tablaSaltos(saltos.at(saltos.length()-1));
                saltos.removeLast();

                saltos.append(ui->tablaCuadruplos->rowCount());
                qInfo() << "                Guarda " << ui->tablaCuadruplos->rowCount() << " en la pila de saltos";

                tablaOperandos(semOpnd.at(i+1));
                tablaOperadores(semOpnd.at(i+2));
                tablaOperandos(semOpnd.at(i+3));
                tablaOperandos(erre);
                qInfo() << "                    Meti√≥ a pila de operandos y operadores";

                qInfo() << "                    Eliminando " << semOpnd.at(i+3) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+3);
                qInfo() << "                    Eliminando " << semOpnd.at(i+2) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+2);
                qInfo() << "                    Eliminando " << semOpnd.at(i+1) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+1);
                qInfo() << "                    Eliminando " << semOpnd.at(i) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i);
                i--;
            } else if (semOpnd.at(i) == "endfor"){  //RELLENAR SALTOS DE UN FOR
                tablaCuadruplos("SI","","","");
                qInfo() << "                Metemos en " << saltos.at(saltos.length()-1) << " esto " << ui->tablaCuadruplos->rowCount()+1;
                tablaCuad_MeterSalto(saltos.at(saltos.length()-1)-1, ui->tablaCuadruplos->rowCount()+1);
                tablaCuad_MeterSalto(ui->tablaCuadruplos->rowCount(), saltos.at(saltos.length()-1)-1);
                tablaSaltos(saltos.at(saltos.length()-1));
                saltos.append(ui->tablaCuadruplos->rowCount());
                qInfo() << "        Se eliminar√° el √∫ltimo de la pila de saltos";
                //saltos.removeLast();
                qInfo() << "        Se elimin√≥ el √∫ltimo de la pila de saltos";
            } else if (semOpnd.at(i) == "eval"){
                qInfo() << "        Va entrar a EVAL con un " << semOpnd.at(i) << "\n             Va a meter a la tabla SV";
                QString erre = "R";
                erre += QString::number(temporalCuadruplos);
                temporalCuadruplos++;
                tablaCuadruplos(semOpnd.at(i+2), semOpnd.at(i+1), semOpnd.at(i+3), erre);
                tablaCuadruplos("SV", erre, "", "");

                tablaCuad_MeterSalto(ui->tablaCuadruplos->rowCount(), saltos.at(saltos.length()-1));
                saltos.removeLast();

                tablaOperandos(semOpnd.at(i+1));
                tablaOperadores(semOpnd.at(i+2));
                tablaOperandos(semOpnd.at(i+3));
                tablaOperandos(erre);
                qInfo() << "                    Meti√≥ a pila de operandos y operadores";

                //saltos.append(ui->tablaCuadruplos->rowCount());
                qInfo() << "                Guarda " << ui->tablaCuadruplos->rowCount() << " en la pila de saltos";

                qInfo() << "                    Eliminando " << semOpnd.at(i+3) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+3);
                qInfo() << "                    Eliminando " << semOpnd.at(i+2) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+2);
                qInfo() << "                    Eliminando " << semOpnd.at(i+1) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i+1);
                qInfo() << "                    Eliminando " << semOpnd.at(i) << " de la pila semOpnd, su tama√±o ahora es: " << semOpnd.length();
                semOpnd.remove(i);
                i--;
            } else if (semOpnd.at(i) == "enddo"){

            }
        }

        if (semOpnd.at(i) == "write"){
            tablaCuadruplos("Write","","","");
            qInfo() << "    Eliminamos " << semOpnd.at(i) << "de la pila";
            semOpnd.removeAt(i);
            i--;
        }
    }

    //IMPRIMIR PILA DE SALTOS
    qInfo() << "\n";
    for (int i = 0; i < saltos.length(); i++) {
        qInfo() << "Salto en " << saltos.at(i);
    }
    //ui->tablaSaltos
    //tablaSaltos(saltos.at(saltos.length()-2));
}

void Widget::tablaSaltos(int x){
    ui->tablaSaltos->insertRow(ui->tablaSaltos->rowCount());
    int fila = ui->tablaSaltos->rowCount()-1;
    ui->tablaSaltos->setItem(fila, 0, new QTableWidgetItem(QString::number(x)));
}

void Widget::tablaCuad_MeterSalto(int pos, int res){
    qInfo() << "    Posici√≥n:" << pos << "      Res: " << res;
    QString salto = QString::number(res);
    pos--;
    ui->tablaCuadruplos->setItem(pos, 3, new QTableWidgetItem(salto));
}

void Widget::tablaOperadores(QString x){
    ui->tablaOperadores->insertRow(ui->tablaOperadores->rowCount());
    int fila = ui->tablaOperadores->rowCount()-1;
    ui->tablaOperadores->setItem(fila, 0, new QTableWidgetItem(x));
}

void Widget::tablaOperandos(QString x){
    ui->tablaOperandos->insertRow(ui->tablaOperandos->rowCount());
    int fila = ui->tablaOperandos->rowCount()-1;
    ui->tablaOperandos->setItem(fila, 0, new QTableWidgetItem(x));
}

QString Widget::jerarquiaCuadruplos(QList<QString> a){
    qInfo() << "\n  Entr√≥ al m√©todo jerarquia cuadr";
    QList<QString> recursivo;
    recursivo.clear();
    QString iterado;
    QString R = "";
    bool masDeTres = false;

    /*for (int i = 0; i < a.length(); i++) {
        qInfo() << "    Par√°metro <a> tiene " << a.at(i) << " en " << i;
    }*/

    for (int i = 0; i < a.length(); i++) {
        //qInfo() << "        Metiendo en pila recursivo " << a.at(i);
        recursivo.append(a.at(i));
        if (a.at(i) == ";"){
            //qInfo() << "            Se detect√≥ ;";
            recursivo.removeLast();
            //qInfo() << "                Manda a llamar a s√≠ mismo";
            iterado = jerarquiaCuadruplos(recursivo);
            //for (int j = 0; j < i; j++) {
                //qInfo() << "                Removiendo" << recursivo.at(j) << " del argumento <recursivo>";
                //recursivo.removeAt(j);
            //}
            recursivo.clear();
            //qInfo() << "                Se ejecut√≥ el m√©todo recursivo";
            //i = a.length()+1;
        }
    }

    /*for (int i = 0; i < recursivo.length(); i++){
        qInfo() << "            Recursivo en [" << i << "]: " << recursivo.at(i);
    }*/

    //METER OPERANDOS Y OPERADORES A SUS TABLAS
    /*for (int i = 0; i < recursivo.length(); i++) {
        if (recursivo.at(i) == "+" || recursivo.at(i) == "-" || recursivo.at(i) == "*" || recursivo.at(i) == "/" || recursivo.at(i) == "^" ||
                recursivo.at(i) == "+=" || recursivo.at(i) == "="){
            tablaOperadores(recursivo.at(i));
            qInfo() << "            Elemento a la izquierda del" << recursivo.at(i) << ":" << recursivo.at(i-1);
        } else if (recursivo.at(i) != "if" && recursivo.at(i) != "for" && recursivo.at(i) != "while" && recursivo.at(i) != "do" &&
                   recursivo.at(i) != "elseif" && recursivo.at(i) != "endif" && recursivo.at(i) != "endif" && recursivo.at(i) != "endfor" &&
                   recursivo.at(i) != "endwhile" && recursivo.at(i) != "enddo" && recursivo.at(i) != "else" && recursivo.at(i) != "==" &&
                   recursivo.at(i) != ">=" && recursivo.at(i) != "<=" ){
            tablaOperandos(recursivo.at(i));
        }
    }*/

    //qInfo() << "                    Va a comparar por la jerarquia ahora s√≠";
    bool v = true;
    QString oper = "", op1 = "", op2 = "", res = "";
    QList<QString> conc;
    for (int j = 0; j < recursivo.length(); j++){ //Ciclo para los par√©ntesis
        if (recursivo.at(j) == "("){
            v = true;
        } else if (recursivo.at(j) == ")"){
            v = false;
        }

        if (v == true){
            //conc.append(concatenacion.at(i));
        }
    }
    if (conc.length() > 2){

    }

    for (int j = 0; j < recursivo.length(); j++){ //ciclo para potencia y raiz
        if (recursivo.at(j) == "^"){
            tablaOperandos(recursivo.at(j-1));
            tablaOperadores(recursivo.at(j));
            tablaOperandos(recursivo.at(j+1));
            qInfo() << "            Meti√≥ a pila de operandos y operadores";
            op2 = recursivo.at(j+1); //El que est√° a la derecha
            recursivo.removeAt(j+1);

            oper = recursivo.at(j);
            recursivo.removeAt(j); //Operador

            op1 = recursivo.at(j-1); //El que est√° a la izquierda
            recursivo.removeAt(j-1);

            //Operaci√≥n para sacar RES ¬ø?
            QString erre = "R";
            erre += QString::number(temporalCuadruplos);
            temporalCuadruplos++;

            recursivo.append((erre));

            tablaCuadruplos(oper, op1, op2, erre);
            tablaOperadores(recursivo.at(j-1));
            tablaOperandos(recursivo.at(j));
            tablaOperadores(recursivo.at(j+1));

            //qInfo() << "    Longitud de la lista: " << concatenacion.length();

            masDeTres = true;
        }

        /*if (semOpnd.at(j) == "if" && semOpnd.at(j) == "while" && semOpnd.at(j) == "do"){
            QString erre = "R";
            erre += QString::number(temporalCuadruplos);
            temporalCuadruplos++;
            tablaCuadruplos(semOpnd.at(j+2), semOpnd.at(j+1), semOpnd.at(j+3), erre);
            tablaCuadruplos("SF", erre, "", "");
            saltos.append(ui->tablaCuadruplos->rowCount());
        } else if (semOpnd.at(j) != "for"){

        }*/
    }

    for (int j = 0; j < recursivo.length(); j++){ //ciclo para multiplicaci√≥n y divisi√≥n
        if (recursivo.at(j) == "*" || recursivo.at(j) == "/"){
            tablaOperandos(recursivo.at(j-1));
            tablaOperadores(recursivo.at(j));
            tablaOperandos(recursivo.at(j+1));
            qInfo() << "            Meti√≥ a pila de operandos y operadores";

            op2 = recursivo.at(j+1); //El que est√° a la derecha
            recursivo.removeAt(j+1);

            oper = recursivo.at(j);
            recursivo.removeAt(j); //Operador

            op1 = recursivo.at(j-1); //El que est√° a la izquierda
            recursivo.removeAt(j-1);

            //Operaci√≥n para sacar RES ¬ø?
            QString erre = "R";
            erre += QString::number(temporalCuadruplos);
            temporalCuadruplos++;

            recursivo.append((erre));

            tablaCuadruplos(oper, op1, op2, erre);
            //qInfo() << "    Longitud de la lista: " << concatenacion.length();

            masDeTres = true;
        }
    }

    for (int j = 0; j < recursivo.length(); j++){ //ciclo para suma, resta y suma igual
        if (recursivo.at(j) == "+" || recursivo.at(j) == "-" || recursivo.at(j) == "+=" || recursivo.at(j) == "-="){
            tablaOperandos(recursivo.at(j-1));
            tablaOperadores(recursivo.at(j));
            tablaOperandos(recursivo.at(j+1));
            qInfo() << "            Meti√≥ a pila de operandos y operadores";

            op2 = recursivo.at(j+1); //El que est√° a la derecha
            recursivo.removeAt(j+1);

            oper = recursivo.at(j);
            recursivo.removeAt(j); //Operador

            op1 = recursivo.at(j-1); //El que est√° a la izquierda
            recursivo.removeAt(j-1);

            //Operaci√≥n para sacar RES ¬ø?
            QString erre = "R";
            erre += QString::number(temporalCuadruplos);
            temporalCuadruplos++;

            recursivo.append((erre));

            tablaCuadruplos(oper, op1, op2, erre);
            //qInfo() << "    Longitud de la lista: " << concatenacion.length();

            masDeTres = true;
        }
    }

    for (int j = 0; j < recursivo.count(); j++){ //ciclo para igualdad
        if (recursivo.at(j) == "=" && masDeTres == true){
            tablaOperandos(recursivo.at(j-1));
            tablaOperadores(recursivo.at(j));
            tablaOperandos(recursivo.at(j+1));
            qInfo() << "            Meti√≥ a pila de operandos y operadores";

            op2 = recursivo.at(j+1); //El que est√° a la derecha
            recursivo.removeAt(j+1);

            oper = recursivo.at(j);
            recursivo.removeAt(j); //Operador

            op1 = recursivo.at(j-1); //El que est√° a la izquierda
            recursivo.removeAt(j-1);

            temporalCuadruplos--;
            QString erre = "R";
            erre += QString::number(temporalCuadruplos);
            temporalCuadruplos++;

            tablaCuadruplos(oper, op1, "", erre);
            //qInfo() << "    Longitud de la lista: " << concatenacion.length();
        } else if (recursivo.at(j) == "=" && masDeTres == false){
            tablaOperandos(recursivo.at(j-1));
            tablaOperadores(recursivo.at(j));
            tablaOperandos(recursivo.at(j+1));
            qInfo() << "            Meti√≥ a pila de operandos y operadores";

            op2 = recursivo.at(j+1); //El que est√° a la derecha
            recursivo.removeAt(j+1);

            oper = recursivo.at(j);
            recursivo.removeAt(j); //Operador

            op1 = recursivo.at(j-1); //El que est√° a la izquierda
            recursivo.removeAt(j-1);

            QString erre = "R";
            erre += QString::number(temporalCuadruplos);
            temporalCuadruplos++;

            tablaCuadruplos(oper, op1, op2, erre);
        }
    }

    return R;
}

void Widget::tablaCuadruplos(QString oper, QString op1, QString op2, QString res){
    int fila;
    ui->tablaCuadruplos->insertRow(ui->tablaCuadruplos->rowCount());
    fila = ui->tablaCuadruplos->rowCount()-1;
    ui->tablaCuadruplos->setItem(fila, 0, new QTableWidgetItem(oper));
    ui->tablaCuadruplos->setItem(fila, 1, new QTableWidgetItem(op1));
    ui->tablaCuadruplos->setItem(fila, 2, new QTableWidgetItem(op2));
    ui->tablaCuadruplos->setItem(fila, 3, new QTableWidgetItem(res));

}

QList<int> Widget::producciones(int e)
{
    QList<int> prods;
    switch (e) {
    case 1:
        prods.insert(0,2);
        prods.insert(1,1);
        break;
    case 2:
        prods.insert(0,1);
        prods.insert(1,1002);
        prods.insert(2,1004);
        prods.insert(3,1000);
        break;
    case 3:
        prods.insert(0,-1);
        break;
    case 4:
        prods.insert(0,1005);
        prods.insert(1,10);
        prods.insert(2,3);
        prods.insert(3,1002);
        prods.insert(4,1004);
        prods.insert(5,1003);
        break;
    case 5:
        prods.insert(0,3);
        prods.insert(1,1002);
        prods.insert(2,9);
        prods.insert(3,1007);
        prods.insert(4,5);
        prods.insert(5,4);
        prods.insert(6,1006);
        break;
    case 6:
        prods.insert(0,-1);
        break;
    case 7:
        prods.insert(0,1008);
        break;
    case 8:
        prods.insert(0,1009);
        break;
    case 9:
        prods.insert(0,1010);
        break;
    case 10:
        prods.insert(0,-1);
        break;
    case 11:
        prods.insert(0,7);
        prods.insert(1,6);
        prods.insert(2,1004);
        break;
    case 12:
        prods.insert(0,6);
        prods.insert(1,1004);
        prods.insert(2,1011);
        break;
    case 13:
        prods.insert(0,-1);
        break;
    case 14:
        prods.insert(0,1038);
        prods.insert(1,8);
        prods.insert(2,1012);
        prods.insert(3,1013);
        prods.insert(4,1013);
        prods.insert(5,1037);
        break;
    case 15:
        prods.insert(0,8);
        prods.insert(1,1012);
        prods.insert(2,1013);
        prods.insert(3,1012);
        prods.insert(4,1011);
        break;
    case 16:
        prods.insert(0,-1);
        break;
    case 17:
        prods.insert(0,1014);
        break;
    case 18:
        prods.insert(0,1015);
        break;
    case 19:
        prods.insert(0,1016);
        break;
    case 20:
        prods.insert(0,1017);
        break;
    case 21:
        prods.insert(0,1018);
        break;
    case 22:
        prods.insert(0,1019);
        break;
    case 23:
        prods.insert(0,12);
        prods.insert(1,11);
        break;
    case 24:
        prods.insert(0,1023);
        prods.insert(1,16);
        prods.insert(2,14);
        prods.insert(3,1022);
        prods.insert(4,13);
        prods.insert(5,1021);
        prods.insert(6,1020);
        break;
    case 25:
        prods.insert(0,13);
        prods.insert(1,1002);
        prods.insert(2,9);
        prods.insert(3,1007);
        prods.insert(4,5);
        break;
    case 26:
        prods.insert(0,-1);
        break;
    case 27:
        prods.insert(0,1025);
        prods.insert(1,15);
        prods.insert(2,1024);
        break;
    case 28:
        prods.insert(0,-1);
        break;
    case 29:
        prods.insert(0,15);
        prods.insert(1,1002);
        prods.insert(2,9);
        prods.insert(3,1007);
        prods.insert(4,5);
        break;
    case 30:
        prods.insert(0,-1);
        break;
    case 31:
        prods.insert(0,11);
        prods.insert(1,1027);
        prods.insert(2,16);
        prods.insert(3,14);
        prods.insert(4,1022);
        prods.insert(5,13);
        prods.insert(6,1021);
        prods.insert(7,9);
        prods.insert(8,1007);
        prods.insert(9,1004);
        prods.insert(10,1026);
        break;
    case 32:
        prods.insert(0,-1);
        break;
    case 33:
        prods.insert(0,16);
        prods.insert(1,1002);
        prods.insert(2,19);
        break;
    case 34:
        prods.insert(0,16);
        prods.insert(1,1002);
        prods.insert(2,33);
        break;
    case 35:
        prods.insert(0,16);
        prods.insert(1,1002);
        prods.insert(2,31);
        break;
    case 36:
        prods.insert(0,16);
        prods.insert(1,1002);
        prods.insert(2,30);
        break;
    case 37:
        prods.insert(0,16);
        prods.insert(1,1002);
        prods.insert(2,32);
        break;
    case 38:
        prods.insert(0,16);
        prods.insert(1,1002);
        prods.insert(2,28);
        break;
    case 39:
        prods.insert(0,16);
        prods.insert(1,1002);
        prods.insert(2,23);
        break;
    case 40:
        prods.insert(0,16);
        prods.insert(1,1002);
        prods.insert(2,20);
        break;
    case 41:
        prods.insert(0,16);
        prods.insert(1,1002);
        prods.insert(2,21);
        break;
    case 42:
        prods.insert(0,-1);
        break;
    case 43:
        prods.insert(0,18);
        prods.insert(1,1004);
        break;
    case 44:
        prods.insert(0,18);
        prods.insert(1,1004);
        prods.insert(2,1011);
        break;
    case 45:
        prods.insert(0,-1);
        break;
    case 46:
        prods.insert(0,36);
        prods.insert(1,24);
        prods.insert(2,25);
        break;
    case 47:
        prods.insert(0,1022);
        prods.insert(1,17);
        prods.insert(2,1021);
        prods.insert(3,1028);
        break;
    case 48:
        prods.insert(0,1022);
        prods.insert(1,22);
        prods.insert(2,36);
        prods.insert(3,1021);
        prods.insert(4,1029);
        break;
    case 49:
        prods.insert(0,22);
        prods.insert(1,36);
        prods.insert(2,1011);
        break;
    case 50:
        prods.insert(0,-1);
        break;
    case 51:
        prods.insert(0,36);
        prods.insert(1,1030);
        break;
    case 52:
        prods.insert(0,1031);
        break;
    case 53:
        prods.insert(0,1032);
        break;
    case 54:
        prods.insert(0,1033);
        break;
    case 55:
        prods.insert(0,1034);
        break;
    case 56:
        prods.insert(0,1035);
        break;
    case 57:
        prods.insert(0,1036);
        break;
    case 58:
        prods.insert(0,26);
        prods.insert(1,1004);
        break;
    case 59:
        prods.insert(0,27);
        break;
    case 60:
        prods.insert(0,-1);
        break;
    case 61:
        prods.insert(0,1038);
        prods.insert(1,22);
        prods.insert(2,1037);
        break;
    case 62:
        prods.insert(0,36);
        prods.insert(1,1039);
        break;
    case 63:
        prods.insert(0,36);
        prods.insert(1,1040);
        break;
    case 64:
        prods.insert(0,29);
        prods.insert(1,36);
        break;
    case 65:
        prods.insert(0,1039);
        break;
    case 66:
        prods.insert(0,1040);
        break;
    case 67:
        prods.insert(0,1044);
        prods.insert(1,16);
        prods.insert(2,1043);
        prods.insert(3,36);
        prods.insert(4,1042);
        prods.insert(5,36);
        prods.insert(6,1031);
        prods.insert(7,1004);
        prods.insert(8,1041);
        break;
    case 68:
        prods.insert(0,1046);
        prods.insert(1,16);
        prods.insert(2,1022);
        prods.insert(3,36);
        prods.insert(4,1021);
        prods.insert(5,1045);
        break;
    case 69:
        prods.insert(0,1048);
        prods.insert(1,1022);
        prods.insert(2,36);
        prods.insert(3,1021);
        prods.insert(4,1047);
        prods.insert(5,16);
        prods.insert(6,1043);
        break;
    case 70:
        prods.insert(0,1050);
        prods.insert(1,35);
        prods.insert(2,34);
        prods.insert(3,16);
        prods.insert(4,1022);
        prods.insert(5,36);
        prods.insert(6,1021);
        prods.insert(7,1049);
        break;
    case 71:
        prods.insert(0,34);
        prods.insert(1,16);
        prods.insert(2,1022);
        prods.insert(3,36);
        prods.insert(4,1021);
        prods.insert(5,1051);
        break;
    case 72:
        prods.insert(0,-1);
        break;
    case 73:
        prods.insert(0,16);
        prods.insert(1,1052);
        break;
    case 74:
        prods.insert(0,-1);
        break;
    case 75:
        prods.insert(0,37);
        prods.insert(1,38);
        break;
    case 76:
        prods.insert(0,36);
        prods.insert(1,1053);
        break;
    case 77:
        prods.insert(0,-1);
        break;
    case 78:
        prods.insert(0,39);
        prods.insert(1,40);
        break;
    case 79:
        prods.insert(0,38);
        prods.insert(1,1054);
        break;
    case 80:
        prods.insert(0,-1);
        break;
    case 81:
        prods.insert(0,41);
        break;
    case 82:
        prods.insert(0,41);
        prods.insert(1,1055);
        break;
    case 83:
        prods.insert(0,42);
        prods.insert(1,43);
        break;
    case 84:
        prods.insert(0,43);
        prods.insert(1,48);
        break;
    case 85:
        prods.insert(0,-1);
        break;
    case 86:
        prods.insert(0,44);
        prods.insert(1,45);
        break;
    case 87:
        prods.insert(0,43);
        prods.insert(1,1056);
        break;
    case 88:
        prods.insert(0,43);
        prods.insert(1,1057);
        break;
    case 89:
        prods.insert(0,-1);
        break;
    case 90:
        prods.insert(0,46);
        prods.insert(1,47);
        break;
    case 91:
        prods.insert(0,45);
        prods.insert(1,1058);
        break;
    case 92:
        prods.insert(0,45);
        prods.insert(1,1059);
        break;
    case 93:
        prods.insert(0,45);
        prods.insert(1,1060);
        break;
    case 94:
        prods.insert(0,-1);
        break;
    case 95:
        prods.insert(0,1061);
        break;
    case 96:
        prods.insert(0,1062);
        break;
    case 97:
        prods.insert(0,1063);
        break;
    case 98:
        prods.insert(0,1064);
        break;
    case 99:
        prods.insert(0,1065);
        break;
    case 100:
        prods.insert(0,1066);
        break;
    case 101:
        prods.insert(0,49);
        prods.insert(1,1004);
        break;
    case 102:
        prods.insert(0,1012);
        break;
    case 103:
        prods.insert(0,1067);
        break;
    case 104:
        prods.insert(0,1068);
        break;
    case 105:
        prods.insert(0,1069);
        break;
    case 106:
        prods.insert(0,1070);
        break;
    case 107:
        prods.insert(0,1022);
        prods.insert(1,36);
        prods.insert(2,1021);
        break;
    case 108:
        prods.insert(0,1022);
        prods.insert(1,50);
        prods.insert(2,1021);
        break;
    case 109:
        prods.insert(0,-1);
        break;
    case 110:
        prods.insert(0,51);
        prods.insert(1,1004);
        break;
    case 111:
        prods.insert(0,-1);
        break;
    case 112:
        prods.insert(0,51);
        prods.insert(1,1004);
        prods.insert(2,1011);
        break;
    case 113:
        prods.insert(0,-1);
        break;
    }
    return prods;
}

void Widget::on_btnAbrir_clicked()
{
    QString fileName = QFileDialog::getOpenFileName(
                this,
                "Abrir archivo",
                "home/Documentos/QT/AnalizadorLex/",
                "Text Files (*.spes);;All Files (*.*)");
    if (!fileName.isEmpty()){
        QFile file(fileName);
        if (file.open(QFile::ReadOnly)){
            ui->txtCadena->setPlainText(file.readAll());
        } else {
            QMessageBox::warning(
                        this,
                        "TextEditor",
                        tr("Cannot read File %1,\nError %2")
                        .arg(fileName)
                        .arg(file.errorString()));
        }
    }
}

void Widget::on_btnGuardar_clicked()
{
    QString fileName = QFileDialog::getSaveFileName(
                this,
                "Guardar como",
                "home/Documentos/QT/AnalizadorLex/",
                "Text Files (*.spes);;All Files (*.*)");
    if (!fileName.isEmpty()){
        curFile = fileName;
        saveFile();
    }
}

void Widget::saveFile()
{
    QFile file(curFile);
    if (file.open(QFile::WriteOnly)){
        file.write(ui->txtCadena->toPlainText().toUtf8());
    } else {
        QMessageBox::warning(
                    this,
                    "TextEditor",
                    tr("Cannot write file %1.9\nError: %2")
                    .arg(curFile)
                    .arg(file.errorString()));
    }
}

void Widget::agregarTabla(int token, QString lexema, QString gramema)
{
    int fila;
    ui->table->insertRow(ui->table->rowCount());
    fila = ui->table->rowCount()-1;
    ui->table->setItem(fila, 0, new QTableWidgetItem(QString::number(token)));
    ui->table->setItem(fila, 1, new QTableWidgetItem(lexema));
    ui->table->setItem(fila, 2, new QTableWidgetItem(gramema));
}

void Widget::limpiar()
{
    int filas = ui->table->rowCount();
    for (int i = 0; i <= filas; i++){
        ui->table->removeRow(0);
    }

    errores = "";
    ui->txtErrores->setPlainText("");

    for(int i = 0; i < lexemas.size(); i++){
        lexemas.removeAt(i);
    }
    for (int i = 0; i < tokens.size(); i++){
        tokens.removeAt(i);
    }

    limpiarPilas();
}

void Widget::limpiarPilas(){
    //SEM√ÅNTICO
    int filas = ui->tablaTipos->rowCount();
    filas = ui->tablaTipos->rowCount();
    for (int i = 0; i <= filas; i++){
        ui->tablaTipos->removeRow(0);
    }

    filas = ui->tablaCuadruplos->rowCount();
    for (int i = 0; i <= filas; i++){
        ui->tablaCuadruplos->removeRow(0);
    }

    filas = ui->tablaSaltos->rowCount();
    for (int i = 0; i <= filas; i++){
        ui->tablaSaltos->removeRow(0);
    }

    filas = ui->tablaOperadores->rowCount();
    for (int i = 0; i <= filas; i++){
        ui->tablaOperadores->removeRow(0);
    }

    filas = ui->tablaOperandos->rowCount();
    for (int i = 0; i <= filas; i++){
        ui->tablaOperandos->removeRow(0);
    }



    operadores.clear();
    operandos.clear();
    oprsSeparador.clear();
    tipo.clear();
    saltos.clear();
    semOpnd.clear();
    semOpndSeparador.clear();
    semOpnd.append("quitar");
    temporalCuadruplos = 1;
    temporalTipos = 1;
}

QString Widget::getCurFile() const
{
    return curFile;
}

void Widget::setCurFile(const QString &value)
{
    curFile = value;
}

void Widget::on_Limpiar_clicked()
{
    limpiar();
}

void Widget::on_pushButton_clicked()
{
    limpiar();
    ui->txtCadena->setPlainText("");
}
